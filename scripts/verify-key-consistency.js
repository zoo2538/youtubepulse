// ÌÇ§ Í∏∞Ï§Ä ÏùºÏπò Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏
import fs from 'fs';
import path from 'path';
import config from './hybrid-sync-config.js';

const EXPORT_DIR = config.EXPORT_DIR;

console.log('üîç ÌÇ§ Í∏∞Ï§Ä ÏùºÏπò Í≤ÄÏ¶ù ÏãúÏûë...');

// ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
function loadServerData() {
  try {
    const serverFile = path.join(EXPORT_DIR, 'server_since.json');
    if (!fs.existsSync(serverFile)) {
      console.log('‚ö†Ô∏è ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§:', serverFile);
      return [];
    }
    
    const rawData = JSON.parse(fs.readFileSync(serverFile, 'utf8'));
    
    // Îç∞Ïù¥ÌÑ∞Í∞Ä Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ Î∞∞Ïó¥Î°ú Î≥ÄÌôò
    let data = rawData;
    if (rawData && typeof rawData === 'object' && !Array.isArray(rawData)) {
      if (rawData.data && Array.isArray(rawData.data)) {
        data = rawData.data;
      } else if (rawData.records && Array.isArray(rawData.records)) {
        data = rawData.records;
      } else {
        data = [];
      }
    }
    
    if (!Array.isArray(data)) {
      console.log('‚ö†Ô∏è ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞Í∞Ä Î∞∞Ïó¥ ÌòïÌÉúÍ∞Ä ÏïÑÎãôÎãàÎã§:', typeof data);
      return [];
    }
    
    console.log(`üì• ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú: ${data.length || 0}Í∞ú Ìï≠Î™©`);
    return data;
  } catch (error) {
    console.error('‚ùå ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error.message);
    return [];
  }
}

// Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
function loadLocalData() {
  try {
    const localFile = path.join(EXPORT_DIR, 'local_snapshot.json');
    if (!fs.existsSync(localFile)) {
      console.log('‚ö†Ô∏è Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú ÏãúÎÆ¨Î†àÏù¥ÏÖòÌï©ÎãàÎã§.');
      return [];
    }
    
    const data = JSON.parse(fs.readFileSync(localFile, 'utf8'));
    console.log(`üì• Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú: ${data.length || 0}Í∞ú Ìï≠Î™©`);
    return data;
  } catch (error) {
    console.error('‚ùå Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error.message);
    return [];
  }
}

// ÌÇ§ ÏÉùÏÑ± Ìï®Ïàò
function generateKey(item) {
  const videoId = item.videoId || item.video_id;
  const dayKey = item.dayKeyLocal || item.day_key_local || 
                 (item.collectionDate ? new Date(item.collectionDate).toISOString().split('T')[0] : null);
  
  if (!videoId || !dayKey) {
    return null;
  }
  
  return `${videoId}_${dayKey}`;
}

// Îç∞Ïù¥ÌÑ∞ Ìï¥Ïãú ÏÉùÏÑ±
function generateHash(item) {
  const key = generateKey(item);
  if (!key) return null;
  
  // Ï§ëÏöîÌïú ÌïÑÎìúÎì§Îßå Ìè¨Ìï®ÌïòÏó¨ Ìï¥Ïãú ÏÉùÏÑ±
  const hashData = {
    videoId: item.videoId || item.video_id,
    channelName: item.channelName || item.channel_name,
    videoTitle: item.videoTitle || item.video_title,
    viewCount: item.viewCount || item.view_count,
    category: item.category,
    status: item.status,
    dayKeyLocal: item.dayKeyLocal || item.day_key_local
  };
  
  return JSON.stringify(hashData);
}

// ÌÇ§ Í∏∞Ï§Ä Í∑∏Î£πÌïë
function groupByKey(data) {
  const groups = new Map();
  
  for (const item of data) {
    const key = generateKey(item);
    if (!key) continue;
    
    if (!groups.has(key)) {
      groups.set(key, []);
    }
    groups.get(key).push(item);
  }
  
  return groups;
}

// ÏùºÏπòÏÑ± Í≤ÄÏ¶ù
function verifyConsistency(serverGroups, localGroups) {
  const report = {
    totalServerKeys: serverGroups.size,
    totalLocalKeys: localGroups.size,
    commonKeys: 0,
    serverOnlyKeys: 0,
    localOnlyKeys: 0,
    conflicts: [],
    summary: {}
  };
  
  // Í≥µÌÜµ ÌÇ§ ÌôïÏù∏
  for (const [key, serverItems] of serverGroups) {
    if (localGroups.has(key)) {
      report.commonKeys++;
      const localItems = localGroups.get(key);
      
      // Ï∂©Îèå Í≤ÄÏÇ¨
      const serverHash = generateHash(serverItems[0]);
      const localHash = generateHash(localItems[0]);
      
      if (serverHash !== localHash) {
        report.conflicts.push({
          key,
          serverItem: serverItems[0],
          localItem: localItems[0],
          serverHash,
          localHash,
          conflictType: 'data_mismatch'
        });
      }
    } else {
      report.serverOnlyKeys++;
    }
  }
  
  // Î°úÏª¨ Ï†ÑÏö© ÌÇ§ ÌôïÏù∏
  for (const [key] of localGroups) {
    if (!serverGroups.has(key)) {
      report.localOnlyKeys++;
    }
  }
  
  // ÏöîÏïΩ ÌÜµÍ≥Ñ
  report.summary = {
    totalKeys: report.totalServerKeys + report.totalLocalKeys - report.commonKeys,
    conflictRate: report.conflicts.length / Math.max(report.commonKeys, 1) * 100,
    consistencyRate: (report.commonKeys - report.conflicts.length) / Math.max(report.commonKeys, 1) * 100
  };
  
  return report;
}

// Î©îÏù∏ Ïã§Ìñâ
async function main() {
  console.log('üöÄ ÌÇ§ Í∏∞Ï§Ä ÏùºÏπò Í≤ÄÏ¶ù Ïã§Ìñâ...');
  
  // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const serverData = loadServerData();
  const localData = loadLocalData();
  
  if (serverData.length === 0 && localData.length === 0) {
    console.log('‚ö†Ô∏è Í≤ÄÏ¶ùÌï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
    return;
  }
  
  // ÌÇ§ Í∏∞Ï§Ä Í∑∏Î£πÌïë
  console.log('üìä ÌÇ§ Í∏∞Ï§Ä Í∑∏Î£πÌïë...');
  const serverGroups = groupByKey(serverData);
  const localGroups = groupByKey(localData);
  
  console.log(`üì• ÏÑúÎ≤Ñ Í∑∏Î£π: ${serverGroups.size}Í∞ú ÌÇ§`);
  console.log(`üì• Î°úÏª¨ Í∑∏Î£π: ${localGroups.size}Í∞ú ÌÇ§`);
  
  // ÏùºÏπòÏÑ± Í≤ÄÏ¶ù
  console.log('üîç ÏùºÏπòÏÑ± Í≤ÄÏ¶ù...');
  const report = verifyConsistency(serverGroups, localGroups);
  
  // Í≤∞Í≥º Ï†ÄÏû•
  const reportFile = path.join(EXPORT_DIR, 'consistency_report.json');
  fs.writeFileSync(reportFile, JSON.stringify(report, null, 2));
  
  // Í≤∞Í≥º Ï∂úÎ†•
  console.log('');
  console.log('üìä Í≤ÄÏ¶ù Í≤∞Í≥º:');
  console.log(`  Ï¥ù ÏÑúÎ≤Ñ ÌÇ§: ${report.totalServerKeys}Í∞ú`);
  console.log(`  Ï¥ù Î°úÏª¨ ÌÇ§: ${report.totalLocalKeys}Í∞ú`);
  console.log(`  Í≥µÌÜµ ÌÇ§: ${report.commonKeys}Í∞ú`);
  console.log(`  ÏÑúÎ≤Ñ Ï†ÑÏö©: ${report.serverOnlyKeys}Í∞ú`);
  console.log(`  Î°úÏª¨ Ï†ÑÏö©: ${report.localOnlyKeys}Í∞ú`);
  console.log(`  Ï∂©Îèå: ${report.conflicts.length}Í∞ú`);
  console.log(`  ÏùºÏπòÏú®: ${report.summary.consistencyRate.toFixed(2)}%`);
  console.log(`  Ï∂©ÎèåÏú®: ${report.summary.conflictRate.toFixed(2)}%`);
  
  if (report.conflicts.length > 0) {
    console.log('');
    console.log('‚ö†Ô∏è Ï∂©Îèå ÏÉÅÏÑ∏:');
    report.conflicts.slice(0, 5).forEach((conflict, index) => {
      console.log(`  ${index + 1}. ${conflict.key}`);
      console.log(`     ÏÑúÎ≤Ñ: ${conflict.serverItem.videoTitle || 'N/A'}`);
      console.log(`     Î°úÏª¨: ${conflict.localItem.videoTitle || 'N/A'}`);
    });
    
    if (report.conflicts.length > 5) {
      console.log(`  ... Î∞è ${report.conflicts.length - 5}Í∞ú Îçî`);
    }
  }
  
  console.log('');
  console.log(`‚úÖ Í≤ÄÏ¶ù ÏôÑÎ£å: ${reportFile}`);
}

main().catch(console.error);
