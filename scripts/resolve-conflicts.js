// Ï∂©Îèå ÏûêÎèô Ìï¥ÏÜå Ïä§ÌÅ¨Î¶ΩÌä∏
import fs from 'fs';
import path from 'path';
import config from './hybrid-sync-config.js';

const EXPORT_DIR = config.EXPORT_DIR;

console.log('üîß Ï∂©Îèå ÏûêÎèô Ìï¥ÏÜå ÏãúÏûë...');

// Ï∂©Îèå Ìï¥ÏÜå Ï†ïÏ±Ö
const RESOLUTION_POLICIES = {
  // Ï°∞ÌöåÏàò/Ï¢ãÏïÑÏöîÎäî ÏµúÎåÄÍ∞í Ïú†ÏßÄ
  viewCount: (server, local) => Math.max(server || 0, local || 0),
  likeCount: (server, local) => Math.max(server || 0, local || 0),
  
  // ÏàòÎèô Î∂ÑÎ•ò ÌïÑÎìúÎäî Î°úÏª¨ Ïö∞ÏÑ† (ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÏÑ§Ï†ïÌïú Í∞í)
  category: (server, local) => local || server,
  subCategory: (server, local) => local || server,
  status: (server, local) => local || server,
  
  // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞Îäî ÏÑúÎ≤Ñ Ïö∞ÏÑ† (Ï†ïÎ≥∏)
  videoTitle: (server, local) => server || local,
  videoDescription: (server, local) => server || local,
  channelName: (server, local) => server || local,
  thumbnailUrl: (server, local) => server || local,
  
  // ÎÇ†ÏßúÎäî ÏµúÏã†Í∞í
  updatedAt: (server, local) => {
    const serverTime = server ? new Date(server).getTime() : 0;
    const localTime = local ? new Date(local).getTime() : 0;
    return serverTime > localTime ? server : local;
  }
};

// Ï∂©Îèå Ìï¥ÏÜå Ìï®Ïàò
function resolveConflict(serverItem, localItem) {
  const resolved = { ...serverItem };
  
  // Í∞Å ÌïÑÎìúÎ≥ÑÎ°ú Ï∂©Îèå Ìï¥ÏÜå Ï†ïÏ±Ö Ï†ÅÏö©
  for (const [field, policy] of Object.entries(RESOLUTION_POLICIES)) {
    const serverValue = serverItem[field];
    const localValue = localItem[field];
    
    if (serverValue !== undefined && localValue !== undefined && serverValue !== localValue) {
      resolved[field] = policy(serverValue, localValue);
    } else if (localValue !== undefined) {
      resolved[field] = localValue;
    }
  }
  
  // Ìï¥ÏÜåÎêú Ìï≠Î™©Ïóê Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
  resolved._resolved = true;
  resolved._resolutionTime = new Date().toISOString();
  resolved._originalServer = serverItem;
  resolved._originalLocal = localItem;
  
  return resolved;
}

// ÏùºÏπòÏÑ± Î≥¥Í≥†ÏÑú Î°úÎìú
function loadConsistencyReport() {
  try {
    const reportFile = path.join(EXPORT_DIR, 'consistency_report.json');
    if (!fs.existsSync(reportFile)) {
      console.log('‚ö†Ô∏è ÏùºÏπòÏÑ± Î≥¥Í≥†ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§:', reportFile);
      return null;
    }
    
    const report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
    console.log(`üì• ÏùºÏπòÏÑ± Î≥¥Í≥†ÏÑú Î°úÎìú: ${report.conflicts?.length || 0}Í∞ú Ï∂©Îèå`);
    return report;
  } catch (error) {
    console.error('‚ùå ÏùºÏπòÏÑ± Î≥¥Í≥†ÏÑú Î°úÎìú Ïã§Ìå®:', error.message);
    return null;
  }
}

// Ï∂©Îèå Ìï¥ÏÜå Ïã§Ìñâ
function resolveConflicts(report) {
  if (!report || !report.conflicts || report.conflicts.length === 0) {
    console.log('‚úÖ Ìï¥Í≤∞Ìï† Ï∂©ÎèåÏù¥ ÏóÜÏäµÎãàÎã§.');
    return [];
  }
  
  console.log(`üîß ${report.conflicts.length}Í∞ú Ï∂©Îèå Ìï¥ÏÜå Ï§ë...`);
  
  const resolvedChanges = [];
  
  for (const conflict of report.conflicts) {
    try {
      const resolved = resolveConflict(conflict.serverItem, conflict.localItem);
      resolvedChanges.push({
        operation: 'update',
        tableName: 'unclassified_data',
        recordId: conflict.key,
        payload: resolved,
        clientVersion: Date.now(),
        _resolution: {
          conflictType: conflict.conflictType,
          resolvedAt: new Date().toISOString(),
          policies: Object.keys(RESOLUTION_POLICIES)
        }
      });
    } catch (error) {
      console.error(`‚ùå Ï∂©Îèå Ìï¥ÏÜå Ïã§Ìå® (${conflict.key}):`, error.message);
    }
  }
  
  console.log(`‚úÖ ${resolvedChanges.length}Í∞ú Ï∂©Îèå Ìï¥ÏÜå ÏôÑÎ£å`);
  return resolvedChanges;
}

// Ìï¥ÏÜå Í≤∞Í≥º Î∂ÑÏÑù
function analyzeResolution(resolvedChanges) {
  const analysis = {
    totalResolved: resolvedChanges.length,
    fieldResolutions: {},
    policyUsage: {}
  };
  
  for (const change of resolvedChanges) {
    const resolution = change._resolution;
    
    // ÌïÑÎìúÎ≥Ñ Ìï¥ÏÜå ÌÜµÍ≥Ñ
    for (const field of resolution.policies) {
      if (!analysis.fieldResolutions[field]) {
        analysis.fieldResolutions[field] = 0;
      }
      analysis.fieldResolutions[field]++;
    }
  }
  
  return analysis;
}

// Î©îÏù∏ Ïã§Ìñâ
async function main() {
  console.log('üöÄ Ï∂©Îèå ÏûêÎèô Ìï¥ÏÜå Ïã§Ìñâ...');
  
  // ÏùºÏπòÏÑ± Î≥¥Í≥†ÏÑú Î°úÎìú
  const report = loadConsistencyReport();
  if (!report) {
    console.log('‚ö†Ô∏è ÏùºÏπòÏÑ± Î≥¥Í≥†ÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÌÇ§ Í∏∞Ï§Ä Í≤ÄÏ¶ùÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî.');
    return;
  }
  
  // Ï∂©Îèå Ìï¥ÏÜå Ïã§Ìñâ
  const resolvedChanges = resolveConflicts(report);
  
  if (resolvedChanges.length === 0) {
    console.log('‚úÖ Ìï¥Í≤∞Ìï† Ï∂©ÎèåÏù¥ ÏóÜÏäµÎãàÎã§.');
    return;
  }
  
  // Ìï¥ÏÜå Í≤∞Í≥º Î∂ÑÏÑù
  const analysis = analyzeResolution(resolvedChanges);
  
  // Í≤∞Í≥º Ï†ÄÏû•
  const resolvedFile = path.join(EXPORT_DIR, 'resolved_changes.json');
  fs.writeFileSync(resolvedFile, JSON.stringify(resolvedChanges, null, 2));
  
  // Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•
  const analysisFile = path.join(EXPORT_DIR, 'resolution_analysis.json');
  fs.writeFileSync(analysisFile, JSON.stringify(analysis, null, 2));
  
  // Í≤∞Í≥º Ï∂úÎ†•
  console.log('');
  console.log('üìä Ìï¥ÏÜå Í≤∞Í≥º:');
  console.log(`  Ï¥ù Ìï¥ÏÜåÎêú Ï∂©Îèå: ${analysis.totalResolved}Í∞ú`);
  console.log(`  ÌïÑÎìúÎ≥Ñ Ìï¥ÏÜå:`);
  
  for (const [field, count] of Object.entries(analysis.fieldResolutions)) {
    console.log(`    ${field}: ${count}Ìöå`);
  }
  
  console.log('');
  console.log(`‚úÖ Ìï¥ÏÜå ÏôÑÎ£å: ${resolvedFile}`);
  console.log(`üìä Î∂ÑÏÑù Í≤∞Í≥º: ${analysisFile}`);
  
  // Ìï¥ÏÜåÎêú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÎØ∏Î¶¨Î≥¥Í∏∞
  if (resolvedChanges.length > 0) {
    console.log('');
    console.log('üîç Ìï¥ÏÜåÎêú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÎØ∏Î¶¨Î≥¥Í∏∞:');
    resolvedChanges.slice(0, 3).forEach((change, index) => {
      console.log(`  ${index + 1}. ${change.recordId}`);
      console.log(`     Ï°∞ÌöåÏàò: ${change.payload.viewCount || 'N/A'}`);
      console.log(`     Ïπ¥ÌÖåÍ≥†Î¶¨: ${change.payload.category || 'N/A'}`);
      console.log(`     ÏÉÅÌÉú: ${change.payload.status || 'N/A'}`);
    });
    
    if (resolvedChanges.length > 3) {
      console.log(`  ... Î∞è ${resolvedChanges.length - 3}Í∞ú Îçî`);
    }
  }
}

main().catch(console.error);
