var q=Object.defineProperty;var B=($,e,t)=>e in $?q($,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):$[e]=t;var I=($,e,t)=>B($,typeof e!="symbol"?e+"":e,t);class E{constructor(){I(this,"dbName","YouTubePulseDB");I(this,"version",2);I(this,"db",null)}async restartConnection(){console.log("🔄 IndexedDB 연결 재시작 중..."),this.db&&(this.db.close(),this.db=null),await new Promise(e=>setTimeout(e,500)),await this.init(),console.log("✅ IndexedDB 연결 재시작 완료")}async init(){return this.db&&(this.db.close(),this.db=null),await new Promise(e=>setTimeout(e,200)),new Promise((e,t)=>{const o=indexedDB.open(this.dbName,this.version);o.onerror=()=>{console.error("IndexedDB 초기화 실패:",o.error),t(o.error)},o.onsuccess=()=>{this.db=o.result,console.log("✅ IndexedDB 초기화 성공:",this.dbName),e()},o.onupgradeneeded=i=>{const a=i.target.result;if(a.objectStoreNames.contains("unclassifiedData")){const s=a.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData");s.indexNames.contains("videoDay")||s.createIndex("videoDay",["videoId","dayKeyLocal"],{unique:!0}),s.indexNames.contains("dayKeyLocal")||s.createIndex("dayKeyLocal","dayKeyLocal",{unique:!1})}else{const r=a.createObjectStore("unclassifiedData",{keyPath:"id"});r.createIndex("channelName","channelName",{unique:!1}),r.createIndex("status","status",{unique:!1}),r.createIndex("category","category",{unique:!1}),r.createIndex("videoDay",["videoId","dayKeyLocal"],{unique:!0}),r.createIndex("dayKeyLocal","dayKeyLocal",{unique:!1})}if(!a.objectStoreNames.contains("classifiedData")){const r=a.createObjectStore("classifiedData",{keyPath:"id"});r.createIndex("channelName","channelName",{unique:!1}),r.createIndex("category","category",{unique:!1})}if(a.objectStoreNames.contains("channels")||a.createObjectStore("channels",{keyPath:"id"}).createIndex("name","name",{unique:!1}),!a.objectStoreNames.contains("videos")){const r=a.createObjectStore("videos",{keyPath:"id"});r.createIndex("channelId","channelId",{unique:!1}),r.createIndex("uploadDate","uploadDate",{unique:!1})}a.objectStoreNames.contains("categories")?(a.deleteObjectStore("categories"),a.createObjectStore("categories",{autoIncrement:!0})):a.createObjectStore("categories",{autoIncrement:!0}),a.objectStoreNames.contains("subCategories")||a.createObjectStore("subCategories",{keyPath:"id",autoIncrement:!0}).createIndex("category","category",{unique:!1}),a.objectStoreNames.contains("systemConfig")||a.createObjectStore("systemConfig",{keyPath:"key"}),a.objectStoreNames.contains("dailySummary")||a.createObjectStore("dailySummary",{keyPath:"date"}).createIndex("date","date",{unique:!0}),a.objectStoreNames.contains("dailyProgress")||a.createObjectStore("dailyProgress",{autoIncrement:!0}),a.objectStoreNames.contains("classifiedByDate")||a.createObjectStore("classifiedByDate",{keyPath:"date"}).createIndex("date","date",{unique:!0})}})}async replaceAllUnclassifiedData(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),r=a.clear();r.onsuccess=()=>{let s=0;const c=e.length;if(c===0){t();return}e.forEach(n=>{const u=a.put(n);u.onsuccess=()=>{s++,s===c&&t()},u.onerror=()=>o(u.error)})},r.onerror=()=>o(r.error)})}async saveUnclassifiedData(e){if(this.db||await this.init(),e.length===0)return Promise.resolve();console.log(`🔄 백업 복원 시작: ${e.length}개 항목`);const t=e.filter(a=>a.videoId?!0:(console.warn("❌ videoId가 없는 항목 제외:",a),!1)).map(a=>{const r=this.normalizeDayKey(a.dayKeyLocal||a.collectionDate||a.uploadDate);return{...a,dayKeyLocal:r,id:a.id||`${Date.now()}_${Math.random().toString(36).substr(2,9)}_${Math.random().toString(36).substr(2,9)}`}});console.log(`✅ 날짜 키 단일화 완료: ${t.length}개 항목`);const o=new Map;t.forEach(a=>{if(!a.videoId||!a.dayKeyLocal){console.warn("❌ 필수 필드가 없는 항목 제외:",{videoId:a.videoId,dayKeyLocal:a.dayKeyLocal});return}const r=`${a.videoId}|${a.dayKeyLocal}`;if(o.has(r)){const s=o.get(r),c={...s,...a,viewCount:Math.max(s.viewCount||0,a.viewCount||0),likeCount:Math.max(s.likeCount||0,a.likeCount||0),status:a.status==="classified"?"classified":s.status,category:a.category||s.category,subCategory:a.subCategory||s.subCategory};o.set(r,c),console.log(`🔄 중복 항목 병합: ${r} (조회수: ${s.viewCount} → ${c.viewCount})`)}else o.set(r,a)});const i=Array.from(o.values());return console.log(`🔄 중복 제거 완료: ${t.length}개 → ${i.length}개`),new Promise((a,r)=>{const s=this.db.transaction(["unclassifiedData"],"readwrite"),c=s.objectStore("unclassifiedData"),n=c.clear();n.onsuccess=()=>{console.log("🗑️ 기존 데이터 삭제 완료");let u=0,l=0;const d=i.length;console.log(`🔄 새 데이터 저장 시작: ${d}개 항목`),i.forEach((g,h)=>{const y=c.put(g);y.onsuccess=()=>{u++,u+l===d&&(console.log(`✅ 백업 복원 완료: ${u}개 성공, ${l}개 실패`),a())},y.onerror=()=>{console.warn(`항목 ${h} 저장 실패:`,y.error),l++,u+l===d&&(console.log(`✅ 백업 복원 완료: ${u}개 성공, ${l}개 실패`),a())}})},n.onerror=()=>{console.error("❌ 기존 데이터 삭제 실패:",n.error),r(n.error)},s.oncomplete=()=>{console.log("🎉 백업 복원 트랜잭션 완료")},s.onerror=()=>{console.error("❌ 백업 복원 트랜잭션 실패:",s.error),r(s.error)}})}normalizeDayKey(e){if(!e)return new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"});try{const t=new Date(e);return isNaN(t.getTime())?new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"}):t.toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"})}catch(t){return console.warn("날짜 키 변환 실패:",e,t),new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"})}}async loadUnclassifiedData(){return this.db||await this.init(),new Promise((e,t)=>{try{const a=this.db.transaction(["unclassifiedData"],"readonly").objectStore("unclassifiedData").getAll();a.onsuccess=()=>{console.log("✅ IndexedDB에서 미분류 데이터 로드:",a.result.length,"개"),e(a.result)},a.onerror=()=>{console.error("❌ 미분류 데이터 로드 실패:",a.error),t(a.error)}}catch(o){console.error("❌ IndexedDB 트랜잭션 실패:",o),t(o)}})}async loadUnclassifiedDataByDate(e){return this.db||await this.init(),new Promise((t,o)=>{const r=this.db.transaction(["unclassifiedData"],"readonly").objectStore("unclassifiedData").getAll();r.onsuccess=()=>{const s=r.result.filter(c=>(c.collectionDate||c.uploadDate)===e);t(s)},r.onerror=()=>o(r.error)})}async getAvailableDates(){return this.db||await this.init(),new Promise((e,t)=>{try{const o=new Set;let i=0;const a=3,r=()=>{if(i++,i===a){const f=new Date,D=new Date(f.getTime()+9*60*60*1e3),v=D.toISOString().split("T")[0];for(let S=0;S<7;S++){const x=new Date(D.getTime()-S*24*60*60*1e3).toISOString().split("T")[0];o.add(x)}const b=Array.from(o).sort((S,p)=>p.localeCompare(S));console.log(`📅 사용 가능한 날짜들 (7일 범위 자동 생성): ${b.length}개`,b),e(b)}},n=this.db.transaction(["unclassifiedData"],"readonly").objectStore("unclassifiedData").getAll();n.onsuccess=()=>{n.result.forEach(f=>{const D=f.collectionDate||f.uploadDate;D&&o.add(D)}),console.log(`📊 unclassifiedData에서 ${n.result.length}개 항목 조회`),r()},n.onerror=()=>{console.error("❌ unclassifiedData 조회 실패:",n.error),r()};const d=this.db.transaction(["classifiedData"],"readonly").objectStore("classifiedData").getAll();d.onsuccess=()=>{d.result.forEach(f=>{const D=f.collectionDate||f.uploadDate;D&&o.add(D)}),console.log(`📊 classifiedData에서 ${d.result.length}개 항목 조회`),r()},d.onerror=()=>{console.error("classifiedData 조회 실패:",d.error),r()};const y=this.db.transaction(["dailyProgress"],"readonly").objectStore("dailyProgress").getAll();y.onsuccess=()=>{y.result.forEach(f=>{f.date&&o.add(f.date)}),console.log(`📊 dailyProgress에서 ${y.result.length}개 항목 조회`),r()},y.onerror=()=>{console.error("❌ dailyProgress 조회 실패:",y.error),r()}}catch(o){console.error("❌ getAvailableDates 트랜잭션 실패:",o),this.restartConnection().then(()=>{console.log("🔄 연결 재시작 후 다시 시도"),e([])}).catch(()=>{t(o)})}})}async clearUnclassifiedData(){return this.db||await this.init(),new Promise((e,t)=>{try{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData").clear();a.onsuccess=()=>{console.log("✅ unclassifiedData 전체 삭제 완료"),e()},a.onerror=()=>{console.error("❌ unclassifiedData 삭제 실패:",a.error),t(a.error)}}catch(o){console.error("❌ clearUnclassifiedData 트랜잭션 실패:",o),t(o)}})}async saveClassifiedData(e){if(this.db||await this.init(),!Array.isArray(e))return console.error("❌ saveClassifiedData: data가 배열이 아닙니다:",typeof e,e),Promise.reject(new Error("Data must be an array"));const t=e.filter(o=>o.id?!0:(console.warn("❌ ID가 없는 분류 데이터 제외:",o),!1));return console.log(`📊 분류 데이터 저장: ${e.length}개 → ${t.length}개 (유효한 데이터)`),new Promise((o,i)=>{const r=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData"),s=r.clear();s.onsuccess=()=>{let c=0;const n=t.length;if(n===0){o();return}t.forEach(u=>{const l=r.put(u);l.onsuccess=()=>{c++,c===n&&o()},l.onerror=()=>i(l.error)})},s.onerror=()=>i(s.error)})}async loadClassifiedData(){return this.db||await this.init(),new Promise((e,t)=>{const a=this.db.transaction(["classifiedData"],"readonly").objectStore("classifiedData").getAll();a.onsuccess=()=>e(a.result),a.onerror=()=>t(a.error)})}async updateClassifiedDataByDate(e,t){return this.db||await this.init(),console.log(`💾 IndexedDB 분류 데이터 업데이트 - ${t}:`,e.length,"개"),new Promise((o,i)=>{const r=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData"),s=r.getAll();s.onsuccess=()=>{const c=s.result;console.log(`📊 IndexedDB 전체 분류 데이터: ${c.length}개`);const n=c.filter(d=>(d.dayKeyLocal||d.collectionDate||d.uploadDate||"").split("T")[0]!==t);console.log(`📊 다른 날짜 분류 데이터: ${n.length}개`);const u=[...n,...e];console.log(`📊 병합 분류 데이터: ${u.length}개 (다른 날짜: ${n.length} + 새 날짜: ${e.length})`);const l=r.clear();l.onsuccess=()=>{console.log("🗑️ 전체 삭제 완료, 병합 분류 데이터 저장 시작");let d=0;const g=u.length;if(g===0){console.log(`✅ ${t} 분류 데이터 업데이트 완료: 데이터 없음`),o();return}u.forEach((h,y)=>{h.id||(h.id=Date.now()+y);const f=r.put(h);f.onsuccess=()=>{d++,d===g&&(console.log(`✅ ${t} 분류 데이터 업데이트 완료: ${e.length}개 추가/수정, 전체 ${u.length}개 유지`),o())},f.onerror=()=>{console.error("❌ 분류 데이터 저장 실패:",f.error),i(f.error)}})},l.onerror=()=>{console.error("❌ 분류 데이터 삭제 실패:",l.error),i(l.error)}},s.onerror=()=>{console.error("❌ 분류 데이터 로드 실패:",s.error),i(s.error)}})}async updateUnclassifiedData(e){return this.db||await this.init(),console.log("💾 IndexedDB 업데이트 - unclassifiedData:",e.length,"개"),console.log("💾 데이터 샘플 (카테고리/세부카테고리):",e.slice(0,3).map(t=>({category:t.category,subCategory:t.subCategory,channelName:t.channelName}))),new Promise((t,o)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData");let r=0;const s=e.length;if(s===0){t();return}e.forEach((c,n)=>{c.id||(c.id=Date.now()+n);const u=a.put(c);u.onsuccess=()=>{r++,r===s&&t()},u.onerror=()=>o(u.error)})})}async updateUnclassifiedDataByDate(e,t){return this.db||await this.init(),console.log(`💾 IndexedDB 날짜별 업데이트 - ${t}:`,e.length,"개"),console.log("💾 데이터 샘플 (카테고리/세부카테고리):",e.slice(0,3).map(o=>({category:o.category,subCategory:o.subCategory,channelName:o.channelName}))),new Promise((o,i)=>{const r=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),s=r.getAll();s.onsuccess=()=>{const c=s.result;console.log(`📊 IndexedDB 전체 데이터: ${c.length}개`);const n=c.filter(d=>(d.dayKeyLocal||d.collectionDate||d.uploadDate||"").split("T")[0]!==t);console.log(`📊 다른 날짜 데이터: ${n.length}개`);const u=[...n,...e];console.log(`📊 병합 데이터: ${u.length}개 (다른 날짜: ${n.length} + 새 날짜: ${e.length})`);const l=r.clear();l.onsuccess=()=>{console.log("🗑️ 전체 삭제 완료, 병합 데이터 저장 시작");let d=0;const g=u.length;if(g===0){console.log(`✅ ${t} 날짜 데이터 업데이트 완료: 데이터 없음`),o();return}u.forEach((h,y)=>{h.id||(h.id=Date.now()+y);const f=r.put(h);f.onsuccess=()=>{d++,d===g&&(console.log(`✅ ${t} 날짜 데이터 업데이트 완료: ${e.length}개 추가/수정, 전체 ${u.length}개 유지`),o())},f.onerror=()=>{console.error("❌ 데이터 저장 실패:",f.error),i(f.error)}})},l.onerror=()=>{console.error("❌ 데이터 삭제 실패:",l.error),i(l.error)}},s.onerror=()=>{console.error("❌ 데이터 로드 실패:",s.error),i(s.error)}})}async updateClassifiedData(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData");let r=0;const s=e.length;if(s===0){t();return}e.forEach((c,n)=>{c.id||(c.id=Date.now()+n);const u=a.put(c);u.onsuccess=()=>{r++,r===s&&t()},u.onerror=()=>o(u.error)})})}async saveChannels(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["channels"],"readwrite").objectStore("channels"),r=a.clear();r.onsuccess=()=>{const s=Object.entries(e);let c=0;const n=s.length;if(n===0){t();return}s.forEach(([u,l])=>{const d=a.put({id:u,...l});d.onsuccess=()=>{c++,c===n&&t()},d.onerror=()=>o(d.error)})},r.onerror=()=>o(r.error)})}async saveVideos(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["videos"],"readwrite").objectStore("videos"),r=a.clear();r.onsuccess=()=>{const s=Object.entries(e);let c=0;const n=s.length;if(n===0){t();return}s.forEach(([u,l])=>{Array.isArray(l)&&l.forEach(d=>{const g=a.put({...d,channelId:u});g.onsuccess=()=>{c++,c===n&&t()},g.onerror=()=>o(g.error)})})},r.onerror=()=>o(r.error)})}async saveCategories(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["subCategories"],"readwrite").objectStore("subCategories"),r=a.clear();r.onsuccess=()=>{const s=a.put({id:1,type:"categories",data:e,timestamp:new Date().toISOString()});s.onsuccess=()=>{console.log("✅ 카테고리 저장 완료:",e),t()},s.onerror=c=>{console.error("❌ 카테고리 저장 실패:",c),o(s.error)}},r.onerror=s=>{console.error("❌ 카테고리 삭제 실패:",s),o(r.error)}})}async loadCategories(){return this.db||await this.init(),new Promise((e,t)=>{const a=this.db.transaction(["subCategories"],"readonly").objectStore("subCategories").getAll();a.onsuccess=()=>{const s=a.result.filter(c=>c.type==="categories").sort((c,n)=>new Date(n.timestamp).getTime()-new Date(c.timestamp).getTime())[0];e((s==null?void 0:s.data)||null)},a.onerror=()=>t(a.error)})}async saveDailyProgress(e){this.db||await this.init(),console.log("🔍 saveDailyProgress 호출됨 - 매개변수:",typeof e,e);let t=[];if(Array.isArray(e))t=e.filter(o=>o&&typeof o=="object"),console.log("🔍 배열로 처리됨:",t.length,"개 항목");else if(e&&typeof e=="object")t=[e],console.log("🔍 객체로 처리됨:",t[0]);else return console.error("❌ saveDailyProgress: 유효하지 않은 데이터 타입:",typeof e,e),Promise.resolve();return new Promise((o,i)=>{const r=this.db.transaction(["dailyProgress"],"readwrite").objectStore("dailyProgress"),s=r.clear();s.onsuccess=()=>{let c=0;const n=t.length;if(n===0){o();return}t.forEach((u,l)=>{const d={...u};d.id||(d.id=Date.now()+l);const g=r.put(d);g.onsuccess=()=>{c++,c===n&&o()},g.onerror=()=>i(g.error)})},s.onerror=()=>i(s.error)})}async saveSubCategories(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["subCategories"],"readwrite").objectStore("subCategories"),r=a.clear();r.onsuccess=()=>{const s=Object.entries(e);let c=0;const n=s.length;if(n===0){t();return}s.forEach(([u,l])=>{Array.isArray(l)&&l.forEach(d=>{const g=a.put({category:u,subCategory:d});g.onsuccess=()=>{c++,c===n&&t()},g.onerror=()=>o(g.error)})})},r.onerror=()=>o(r.error)})}async loadSubCategories(){return this.db||await this.init(),new Promise((e,t)=>{const o={},r=this.db.transaction(["subCategories"],"readonly").objectStore("subCategories").getAll();r.onsuccess=()=>{(r.result||[]).forEach(c=>{const n=c.category,u=c.subCategory;!n||!u||(o[n]||(o[n]=[]),o[n].includes(u)||o[n].push(u))}),e(o)},r.onerror=()=>t(r.error)})}async saveSystemConfig(e,t){return this.db||await this.init(),new Promise((o,i)=>{const s=this.db.transaction(["systemConfig"],"readwrite").objectStore("systemConfig").put({key:e,value:t});s.onsuccess=()=>o(),s.onerror=()=>i(s.error)})}async loadSystemConfig(e){return this.db||await this.init(),new Promise((t,o)=>{const r=this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig").get(e);r.onsuccess=()=>{var s;return t((s=r.result)==null?void 0:s.value)},r.onerror=()=>o(r.error)})}async clearDatabase(){return new Promise((e,t)=>{const o=indexedDB.deleteDatabase(this.dbName);o.onsuccess=()=>{this.db=null,e()},o.onerror=()=>t(o.error)})}async saveDailySummary(e,t){return this.db||await this.init(),new Promise((o,i)=>{const r=this.db.transaction(["dailySummary"],"readwrite").objectStore("dailySummary"),s={date:e};t&&typeof t=="object"&&!Array.isArray(t)&&Object.keys(t).forEach(n=>{n!=="date"&&(s[n]=t[n])}),console.log("💾 saveDailySummary 호출:",{date:e,summaryKeys:t?Object.keys(t):[],dataToSaveKeys:Object.keys(s)});const c=r.put(s);c.onsuccess=()=>{console.log("✅ dailySummary 저장 성공:",e),o()},c.onerror=()=>{console.error("❌ dailySummary 저장 실패:",c.error,{date:e,dataToSave:s}),i(c.error)}})}async loadDailySummary(e){return this.db||await this.init(),new Promise((t,o)=>{const r=this.db.transaction(["dailySummary"],"readonly").objectStore("dailySummary").get(e);r.onsuccess=()=>t(r.result||null),r.onerror=()=>o(r.error)})}async saveClassifiedByDate(e,t){return this.db||await this.init(),new Promise((o,i)=>{const s=this.db.transaction(["classifiedByDate"],"readwrite").objectStore("classifiedByDate").put({date:e,items:t});s.onsuccess=()=>o(),s.onerror=()=>i(s.error)})}async loadClassifiedByDate(e){return this.db||await this.init(),new Promise((t,o)=>{const r=this.db.transaction(["classifiedByDate"],"readonly").objectStore("classifiedByDate").get(e);r.onsuccess=()=>{const s=r.result;t((s==null?void 0:s.items)||null)},r.onerror=()=>o(r.error)})}async updateAllCollectionDates(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),r=a.getAll();r.onsuccess=()=>{const s=r.result;console.log(`📊 전체 데이터: ${s.length}개`);const c=s.map(l=>({...l,collectionDate:e}));let n=0,u=0;c.forEach((l,d)=>{const g=a.put(l);g.onsuccess=()=>{n++,n%100===0&&console.log(`✅ ${n}/${s.length} 업데이트 완료`),n+u===s.length&&(console.log(`🎉 업데이트 완료! 총 ${n}개 데이터를 ${e}로 변경`),t(n))},g.onerror=()=>{u++,console.error(`❌ ${d+1}번째 데이터 업데이트 실패:`,g.error),n+u===s.length&&(console.log(`⚠️ 업데이트 완료: ${n}개 성공, ${u}개 실패`),t(n))}})},r.onerror=()=>{o(r.error)}})}async listClassifiedDates(){return this.db||await this.init(),new Promise((e,t)=>{const a=this.db.transaction(["classifiedByDate"],"readonly").objectStore("classifiedByDate").getAllKeys();a.onsuccess=()=>{const r=a.result||[];e(r)},a.onerror=()=>t(a.error)})}async cleanupOldData(e=14){this.db||await this.init();const t=new Date;t.setDate(t.getDate()-e);const o=t.toISOString().split("T")[0];let i=0;const r=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),s=r.getAll();await new Promise(D=>{s.onsuccess=()=>{s.result.filter(b=>new Date(b.uploadDate)<t).forEach(b=>{r.delete(b.id),i++}),D()}});const n=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData"),u=n.getAll();await new Promise(D=>{u.onsuccess=()=>{u.result.filter(b=>new Date(b.uploadDate)<t).forEach(b=>{n.delete(b.id),i++}),D()}});const d=this.db.transaction(["videos"],"readwrite").objectStore("videos"),g=d.getAll();await new Promise(D=>{g.onsuccess=()=>{g.result.filter(b=>new Date(b.uploadDate)<t).forEach(b=>{d.delete(b.id),i++}),D()}});const y=this.db.transaction(["dailySummary"],"readwrite").objectStore("dailySummary"),f=y.getAll();return await new Promise(D=>{f.onsuccess=()=>{(f.result||[]).forEach(b=>{const S=((b==null?void 0:b.date)||"").toString();S&&S<o&&(y.delete(b.date),i++)}),D()}}),console.log(`🧹 7일 데이터 정리 완료: ${i}개 데이터 삭제`),i}async getDatabaseInfo(){this.db||await this.init();const e={name:this.dbName,version:this.version,objectStores:Array.from(this.db.objectStoreNames),size:0,retentionDays:7,lastCleanup:null};for(const t of e.objectStores){const a=this.db.transaction([t],"readonly").objectStore(t).count();await new Promise(r=>{a.onsuccess=()=>{e.size+=a.result,r()}})}try{const t=await this.loadSystemConfig("retentionDays");typeof t=="number"&&t>0&&(e.retentionDays=t)}catch{}return e}async deleteUnclassifiedDataByIds(e){return this.db||await this.init(),new Promise((t,o)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData");let r=0;const s=e.length;if(s===0){t();return}e.forEach(c=>{const n=a.delete(c);n.onsuccess=()=>{r++,r===s&&(console.log(`✅ IndexedDB에서 ${s}개 데이터 삭제 완료`),t())},n.onerror=()=>{console.error(`❌ ID ${c} 삭제 실패:`,n.error),o(n.error)}})})}async deleteDataByDate(e){return this.db||await this.init(),console.log(`🗑️ ${e} 날짜 데이터 삭제 시작...`),new Promise((t,o)=>{const i=this.db.transaction(["unclassifiedData","classifiedData"],"readwrite"),a=i.objectStore("unclassifiedData"),r=i.objectStore("classifiedData");let s=!1,c=!1,n=0;const u=()=>{s&&c&&(console.log(`✅ ${e} 날짜 데이터 삭제 완료: ${n}개 삭제`),t())},l=a.getAll();l.onsuccess=()=>{const h=l.result.filter(y=>{const f=y.collectionDate||y.uploadDate;return f&&f.split("T")[0]===e});if(console.log(`📊 unclassifiedData에서 삭제할 데이터: ${h.length}개`),h.length===0)s=!0,u();else{let y=0;h.forEach(f=>{const D=a.delete(f.id);D.onsuccess=()=>{y++,n++,y===h.length&&(s=!0,u())},D.onerror=()=>o(D.error)})}};const d=r.getAll();d.onsuccess=()=>{const h=d.result.filter(y=>{const f=y.collectionDate||y.uploadDate;return f&&f.split("T")[0]===e});if(console.log(`📊 classifiedData에서 삭제할 데이터: ${h.length}개`),h.length===0)c=!0,u();else{let y=0;h.forEach(f=>{const D=r.delete(f.id);D.onsuccess=()=>{y++,n++,y===h.length&&(c=!0,u())},D.onerror=()=>o(D.error)})}},l.onerror=()=>o(l.error),d.onerror=()=>o(d.error)})}async idempotentUpsertUnclassifiedData(e){if(!this.db)throw new Error("Database not initialized");return new Promise((t,o)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),r=a.index("videoDay");let s=0,c=0,n=0;const u=e.length;if(u===0){t();return}console.log(`🔄 IndexedDB 멱등 복원 시작: ${u}개 레코드`),e.forEach(l=>{if(!l.dayKeyLocal&&l.collectionDate){const h=new Date(l.collectionDate);l.dayKeyLocal=h.toISOString().split("T")[0]}const d=[l.videoId,l.dayKeyLocal],g=r.get(d);g.onsuccess=()=>{if(g.result){const h=g.result,y={...h,viewCount:Math.max(h.viewCount||0,l.viewCount||0),likeCount:Math.max(h.likeCount||0,l.likeCount||0),channelName:l.channelName||h.channelName,videoTitle:l.videoTitle||h.videoTitle,videoDescription:l.videoDescription||h.videoDescription,thumbnailUrl:l.thumbnailUrl||h.thumbnailUrl,category:l.category||h.category,subCategory:l.subCategory||h.subCategory,status:l.status||h.status,updatedAt:new Date().toISOString()},f=a.put(y);f.onsuccess=()=>{c++,s++,s===u&&(console.log(`✅ IndexedDB 멱등 복원 완료: 병합 ${c}개, 신규 ${n}개`),t())},f.onerror=()=>{console.error("IndexedDB 병합 실패:",f.error),s++,s===u&&t()}}else{const h={...l,id:l.id||Date.now().toString()+Math.random().toString(36).substr(2,9),createdAt:l.createdAt||new Date().toISOString(),updatedAt:new Date().toISOString()},y=a.put(h);y.onsuccess=()=>{n++,s++,s===u&&(console.log(`✅ IndexedDB 멱등 복원 완료: 병합 ${c}개, 신규 ${n}개`),t())},y.onerror=()=>{console.error("IndexedDB 추가 실패:",y.error),s++,s===u&&t()}}},g.onerror=()=>{console.error("IndexedDB 조회 실패:",g.error),s++,s===u&&t()}})})}async upsertUnclassifiedDataWithMaxValues(e){if(!this.db)throw new Error("Database not initialized");return new Promise((t,o)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),r=a.index("videoDay");let s=0;const c=e.length;if(c===0){t();return}e.forEach(n=>{if(!n.dayKeyLocal&&n.collectionDate){const d=new Date(n.collectionDate);n.dayKeyLocal=d.toISOString().split("T")[0]}const u=[n.videoId,n.dayKeyLocal],l=r.get(u);l.onsuccess=()=>{if(l.result){const d=l.result,g={...d,viewCount:Math.max(d.viewCount||0,n.viewCount||0),likeCount:Math.max(d.likeCount||0,n.likeCount||0),channelName:n.channelName||d.channelName,videoTitle:n.videoTitle||d.videoTitle,videoDescription:n.videoDescription||d.videoDescription,thumbnailUrl:n.thumbnailUrl||d.thumbnailUrl,category:n.category||d.category,subCategory:n.subCategory||d.subCategory,status:n.status||d.status,updatedAt:new Date().toISOString()},h=a.put(g);h.onsuccess=()=>{s++,s===c&&t()},h.onerror=()=>o(h.error)}else{n.id||(n.id=`${Date.now()}_${Math.random().toString(36).substr(2,9)}`);const d=a.put(n);d.onsuccess=()=>{s++,s===c&&t()},d.onerror=()=>o(d.error)}},l.onerror=()=>o(l.error)})})}}const w=new E,U=Object.freeze(Object.defineProperty({__proto__:null,indexedDBService:w},Symbol.toStringTag,{value:"Module"})),R="https://api.youthbepulse.com";class j{constructor(){I(this,"baseURL");this.baseURL=R}async request(e,t={}){var o;try{const i=`${this.baseURL}${e}`,a=new AbortController,r=setTimeout(()=>a.abort(),6e4),s=await fetch(i,{headers:{"Content-Type":"application/json",...t.headers},signal:a.signal,...t});if(clearTimeout(r),!s.ok){let n="";try{const u=await s.json();n=JSON.stringify(u,null,2)}catch{n=`Status: ${s.status}, StatusText: ${s.statusText}`}throw console.error("🚨 서버 에러 상세:",{status:s.status,statusText:s.statusText,url:i,details:n,headers:Object.fromEntries(s.headers.entries())}),new Error(`HTTP error! status: ${s.status} - ${n}`)}const c=await s.json();return c&&typeof c=="object"&&"success"in c&&"data"in c?(console.log("📦 서버 응답이 이미 표준 형식:",{success:c.success,dataLength:(o=c.data)==null?void 0:o.length}),c):{success:!0,data:c}}catch(i){return console.error("API 요청 실패:",i),i instanceof Error&&i.name==="AbortError"?{success:!1,error:"Request timeout (60s)"}:{success:!1,error:i instanceof Error?i.message:"Unknown error"}}}async saveChannels(e){return this.request("/api/channels",{method:"POST",body:JSON.stringify({channels:e})})}async getChannels(){return this.request("/api/channels")}async saveVideos(e){return this.request("/api/videos",{method:"POST",body:JSON.stringify({videos:e})})}async getVideos(){return this.request("/api/videos")}async saveClassifiedData(e){return this.request("/api/classified",{method:"POST",body:JSON.stringify(e)})}async getClassifiedData(){return this.request("/api/classified")}async saveUnclassifiedData(e){return this.request("/api/unclassified",{method:"POST",body:JSON.stringify(e)})}async getUnclassifiedData(){return this.request("/api/unclassified")}async getDataIds(){return this.request("/api/data/ids")}async saveSystemConfig(e,t){return this.request("/api/system/config",{method:"POST",body:JSON.stringify({key:e,value:t})})}async getSystemConfig(e){return this.request(`/api/system/config/${e}`)}async saveDailyStats(e,t){return this.request("/api/daily-stats",{method:"POST",body:JSON.stringify({date:e,stats:t})})}async getDailyStats(e){const t=e?`/api/daily-stats/${e}`:"/api/daily-stats";return this.request(t)}async testConnection(){return this.request("/api/health")}async updateVideo(e,t){return this.request(`/api/videos/${e}`,{method:"PATCH",body:JSON.stringify(t)})}async deleteVideo(e){return this.request(`/api/videos/${e}`,{method:"DELETE"})}async deleteVideosBatch(e){return this.request("/api/videos/batch",{method:"DELETE",body:JSON.stringify({ids:e})})}}const m=new j;class N{constructor(e={}){I(this,"dbName","YouTubePulseOutbox");I(this,"dbVersion",1);I(this,"storeName","outbox");I(this,"config");this.config={maxRetries:3,retryDelay:5e3,batchSize:10,...e}}async initDB(){return new Promise((e,t)=>{const o=indexedDB.open(this.dbName,this.dbVersion);o.onerror=()=>t(o.error),o.onsuccess=()=>e(o.result),o.onupgradeneeded=i=>{const a=i.target.result;if(!a.objectStoreNames.contains(this.storeName)){const r=a.createObjectStore(this.storeName,{keyPath:"id"});r.createIndex("timestamp","timestamp"),r.createIndex("status","status"),r.createIndex("type","type")}}})}async addToOutbox(e,t,o){const i=`outbox_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,a={id:i,type:e,endpoint:t,payload:o,timestamp:Date.now(),retries:0,maxRetries:this.config.maxRetries,status:"pending"};try{const c=(await this.initDB()).transaction([this.storeName],"readwrite").objectStore(this.storeName);return await new Promise((n,u)=>{const l=c.add(a);l.onsuccess=()=>n(),l.onerror=()=>u(l.error)}),console.log(`📦 아웃박스 추가: ${e} ${t}`,a),i}catch(r){throw console.error("❌ 아웃박스 추가 실패:",r),r}}async getPendingItems(){try{const i=(await this.initDB()).transaction([this.storeName],"readonly").objectStore(this.storeName).index("status");return new Promise((a,r)=>{const s=i.getAll("pending");s.onsuccess=()=>a(s.result),s.onerror=()=>r(s.error)})}catch(e){return console.error("❌ 대기 작업 조회 실패:",e),[]}}async updateItemStatus(e,t,o){try{const r=(await this.initDB()).transaction([this.storeName],"readwrite").objectStore(this.storeName),s=r.get(e);await new Promise((c,n)=>{s.onsuccess=()=>{const u=s.result;if(u){u.status=t,u.error=o,t==="failed"&&(u.retries+=1);const l=r.put(u);l.onsuccess=()=>c(),l.onerror=()=>n(l.error)}else n(new Error("Item not found"))},s.onerror=()=>n(s.error)}),console.log(`📦 아웃박스 상태 업데이트: ${e} → ${t}`)}catch(i){throw console.error("❌ 아웃박스 상태 업데이트 실패:",i),i}}async removeCompletedItems(){try{const o=(await this.initDB()).transaction([this.storeName],"readwrite").objectStore(this.storeName),i=o.index("status");await new Promise((a,r)=>{const s=i.getAllKeys("completed");s.onsuccess=()=>{const c=s.result;if(c.length===0){a();return}let n=0;c.forEach(u=>{const l=o.delete(u);l.onsuccess=()=>{n++,n===c.length&&a()},l.onerror=()=>r(l.error)})},s.onerror=()=>r(s.error)}),console.log("🗑️ 완료된 아웃박스 작업 제거 완료")}catch(e){console.error("❌ 완료된 작업 제거 실패:",e)}}async processOutbox(){const e=await this.getPendingItems();if(e.length===0)return{success:0,failed:0};console.log(`📦 아웃박스 처리 시작: ${e.length}개 작업`);let t=0,o=0;for(let i=0;i<e.length;i+=this.config.batchSize){const a=e.slice(i,i+this.config.batchSize);await Promise.allSettled(a.map(async r=>{try{if(r.retries>=r.maxRetries){await this.updateItemStatus(r.id,"failed","Max retries exceeded"),o++;return}const s=await fetch(r.endpoint,{method:r.type==="update"?"PATCH":r.type==="delete"?"DELETE":"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r.payload)});if(s.ok)await this.updateItemStatus(r.id,"completed"),t++,console.log(`✅ 아웃박스 작업 성공: ${r.type} ${r.endpoint}`);else throw new Error(`HTTP ${s.status}: ${s.statusText}`)}catch(s){console.error(`❌ 아웃박스 작업 실패: ${r.type} ${r.endpoint}`,s),await this.updateItemStatus(r.id,"failed",s instanceof Error?s.message:"Unknown error"),o++}})),i+this.config.batchSize<e.length&&await new Promise(r=>setTimeout(r,1e3))}return await this.removeCompletedItems(),console.log(`📦 아웃박스 처리 완료: 성공 ${t}개, 실패 ${o}개`),{success:t,failed:o}}startAutoProcess(){navigator.onLine&&setTimeout(()=>this.processOutbox(),2e3),window.addEventListener("online",()=>{console.log("🌐 온라인 상태 감지 - 아웃박스 처리 시작"),setTimeout(()=>this.processOutbox(),1e3)}),setInterval(()=>{navigator.onLine&&this.processOutbox()},5*60*1e3)}async getStats(){try{const o=(await this.initDB()).transaction([this.storeName],"readonly").objectStore(this.storeName),i=await new Promise((a,r)=>{const s=o.getAll();s.onsuccess=()=>a(s.result),s.onerror=()=>r(s.error)});return{pending:i.filter(a=>a.status==="pending").length,failed:i.filter(a=>a.status==="failed").length,completed:i.filter(a=>a.status==="completed").length}}catch(e){return console.error("❌ 아웃박스 통계 조회 실패:",e),{pending:0,failed:0,completed:0}}}}const P=new N;class O{constructor(){I(this,"config");const e=window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1";this.config={useApiServer:!0,fallbackToLocal:!0},console.log(e?"🔧 개발 환경: IndexedDB + PostgreSQL (하이브리드)":"🌐 프로덕션 환경: IndexedDB + PostgreSQL (하이브리드)")}updateConfig(e){this.config={...this.config,...e}}async bootstrapSync(){try{console.log("🔄 부트스트랩 동기화 시작 - 차분 업로드 방식...");const[e,t]=await Promise.all([w.loadUnclassifiedData(),w.loadClassifiedData()]),o=((e==null?void 0:e.length)||0)+((t==null?void 0:t.length)||0);if(console.log(`📊 로컬 데이터: 미분류 ${(e==null?void 0:e.length)||0}개, 분류 ${(t==null?void 0:t.length)||0}개, 총 ${o}개`),o===0)return{success:!0,uploaded:0,message:"업로드할 로컬 데이터가 없습니다."};console.log("🔍 서버 데이터 ID 목록 조회 중...");const i=await m.getDataIds();let a=new Set,r=new Set;i.success&&i.data?(a=new Set(i.data.unclassifiedIds),r=new Set(i.data.classifiedIds),console.log(`📊 서버 기존 데이터: 미분류 ${a.size}개, 분류 ${r.size}개`)):console.log("⚠️ 서버 데이터 ID 조회 실패, 전체 업로드 진행");const s=(e==null?void 0:e.filter(d=>!a.has(String(d.id))))||[],c=(t==null?void 0:t.filter(d=>!r.has(String(d.id))))||[],n=s.length+c.length;if(console.log(`📊 차분 계산 결과: 새로운 데이터 ${n}개 (미분류: ${s.length}개, 분류: ${c.length}개)`),console.log(`📊 중복 제외: 미분류 ${((e==null?void 0:e.length)||0)-s.length}개, 분류 ${((t==null?void 0:t.length)||0)-c.length}개`),n===0)return{success:!0,uploaded:0,message:"서버에 이미 모든 데이터가 있습니다. 업로드할 새 데이터가 없습니다."};let u=0;const l=500;if(s&&s.length>0){console.log(`📤 새로운 미분류 데이터 업로드 시작: ${s.length}개`);for(let d=0;d<s.length;d+=l){const g=s.slice(d,d+l),h=Math.floor(d/l)+1,y=Math.ceil(s.length/l);console.log(`📦 미분류 청크 ${h}/${y} 업로드 중... (${g.length}개)`);try{const f=await m.saveUnclassifiedData(g);f.success?(u+=g.length,console.log(`✅ 미분류 청크 ${h}/${y} 업로드 완료`)):console.error(`❌ 미분류 청크 ${h} 업로드 실패:`,f.error),d+l<e.length&&await new Promise(D=>setTimeout(D,300))}catch(f){console.error(`❌ 미분류 청크 ${h} 업로드 오류:`,f),console.log(`🔄 청크 ${h} 재시도 중...`);try{(await m.saveUnclassifiedData(g)).success&&(u+=g.length,console.log(`✅ 미분류 청크 ${h} 재시도 성공`))}catch{console.error(`❌ 청크 ${h} 재시도 실패, 건너뜀`)}}}console.log(`✅ 미분류 데이터 전체 업로드 완료: ${u}개`)}if(c&&c.length>0){console.log(`📤 새로운 분류 데이터 업로드 시작: ${c.length}개`);for(let d=0;d<c.length;d+=l){const g=c.slice(d,d+l),h=Math.floor(d/l)+1,y=Math.ceil(c.length/l);console.log(`📦 분류 청크 ${h}/${y} 업로드 중... (${g.length}개)`);try{const f=await m.saveClassifiedData(g);f.success?(u+=g.length,console.log(`✅ 분류 청크 ${h}/${y} 업로드 완료`)):console.error(`❌ 분류 청크 ${h} 업로드 실패:`,f.error),d+l<t.length&&await new Promise(D=>setTimeout(D,300))}catch(f){console.error(`❌ 분류 청크 ${h} 업로드 오류:`,f),console.log(`🔄 청크 ${h} 재시도 중...`);try{(await m.saveClassifiedData(g)).success&&(u+=g.length,console.log(`✅ 분류 청크 ${h} 재시도 성공`))}catch{console.error(`❌ 청크 ${h} 재시도 실패, 건너뜀`)}}}console.log("✅ 분류 데이터 전체 업로드 완료")}console.log("🔄 서버 스냅샷으로 로컬 캐시 갱신 중...");try{const[d,g]=await Promise.all([this.loadUnclassifiedData(),this.getClassifiedData()]);console.log(`✅ 서버 스냅샷 재적재 완료: 미분류 ${(d==null?void 0:d.length)||0}개, 분류 ${(g==null?void 0:g.length)||0}개`)}catch(d){console.warn("⚠️ 캐시 갱신 실패 (데이터는 업로드됨):",d)}return console.log("✅ 부트스트랩 동기화 완료!"),{success:!0,uploaded:u,message:`${u.toLocaleString()}개의 새로운 데이터를 서버로 업로드했습니다.

중복 제외: ${o-n}개`}}catch(e){return console.error("❌ 부트스트랩 동기화 실패:",e),{success:!1,uploaded:0,message:`동기화 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`}}}async saveChannels(e){try{if(this.config.useApiServer){const t=await m.saveChannels(e);if(t.success)console.log("✅ API 서버에 채널 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveChannels(e),console.log("✅ 로컬 IndexedDB에 채널 데이터 저장 완료")}catch(t){if(console.error("❌ 채널 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveChannels(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getChannels(){try{if(this.config.useApiServer){const e=await m.getChannels();if(e.success&&e.data)return console.log("✅ API 서버에서 채널 데이터 조회 완료"),e.data}if(this.config.fallbackToLocal){const e=await w.getChannels();return console.log("⚠️ 로컬 IndexedDB에서 채널 데이터 조회"),e}return{}}catch(e){return console.error("❌ 채널 데이터 조회 실패:",e),this.config.fallbackToLocal?await w.getChannels():{}}}async saveVideos(e){try{if(this.config.useApiServer){const t=await m.saveVideos(e);if(t.success)console.log("✅ API 서버에 비디오 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveVideos(e),console.log("✅ 로컬 IndexedDB에 비디오 데이터 저장 완료")}catch(t){if(console.error("❌ 비디오 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveVideos(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getVideos(){try{if(this.config.useApiServer){const e=await m.getVideos();if(e.success&&e.data)return console.log("✅ API 서버에서 비디오 데이터 조회 완료"),e.data}if(this.config.fallbackToLocal){const e=await w.getVideos();return console.log("⚠️ 로컬 IndexedDB에서 비디오 데이터 조회"),e}return{}}catch(e){return console.error("❌ 비디오 데이터 조회 실패:",e),this.config.fallbackToLocal?await w.getVideos():{}}}async adaptiveBatchUpload(e,t,o){var l,d,g,h;let s=500,c=0,n=0;const u=[];console.log(`📦 어댑티브 배치 업로드 시작: ${e.length}개 (${o})`);for(let y=0;y<e.length;y+=s){const f=e.slice(y,y+s),D=Math.floor(y/s)+1,v=Math.ceil(e.length/s);console.log(`📦 배치 ${D}/${v} 전송 중... (${f.length}개, 크기: ${s})`);let b=!1,S=0;for(;S<3&&!b;)try{const p=JSON.stringify(f).length,x=((l=f[0])==null?void 0:l.id)||"unknown",A=((d=f[f.length-1])==null?void 0:d.id)||"unknown";console.log("📊 배치 요청 정보:",{batchNum:D,size:f.length,payloadBytes:p,firstId:x,lastId:A,retryAttempt:S+1});const C=await t(f);if(C.success)console.log(`✅ 배치 ${D} 전송 완료 (시도 ${S+1})`),b=!0,c+=f.length,s<1e3&&S===0&&(s=Math.min(s+50,1e3));else throw new Error(C.error||"API 응답 실패")}catch(p){S++;const x=((g=p.message)==null?void 0:g.includes("status: 500"))||((h=p.message)==null?void 0:h.includes("status: 413"));if(console.error(`❌ 배치 ${D} 전송 실패 (시도 ${S}/3):`,{error:p.message,isServerError:x,currentBatchSize:s}),x&&S<3){s=Math.max(Math.floor(s/2),50),console.log(`🔄 배치 크기 축소: ${s}`);const A=Math.pow(2,S-1)*1e3;console.log(`⏳ 백오프 대기: ${A}ms`),await new Promise(T=>setTimeout(T,A));const C=f.slice(0,s);C.length<f.length&&e.splice(y+C.length,0,...f.slice(C.length)),f.length=C.length,Object.assign(f,C)}else S>=3&&(console.error(`💀 배치 ${D} 데드레터 큐로 이동:`,f.map(A=>A.id)),u.push(...f),n+=f.length,b=!0)}y+s<e.length&&await new Promise(p=>setTimeout(p,1e3))}return console.log("📊 어댑티브 배치 업로드 완료:",{success:c,failed:n,deadLetter:u.length,finalBatchSize:s}),{success:c,failed:n,deadLetterItems:u}}async saveClassifiedData(e){try{if(this.config.useApiServer)if(Array.isArray(e)&&e.length>500){const t=await this.adaptiveBatchUpload(e,o=>m.saveClassifiedData(o),"분류 데이터");t.deadLetterItems.length>0&&console.warn(`⚠️ ${t.deadLetterItems.length}개 항목이 데드레터 큐로 이동됨`)}else{const t=await m.saveClassifiedData(e);if(t.success)console.log("✅ API 서버에 분류 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveClassifiedData(e),console.log("✅ 로컬 IndexedDB에 분류 데이터 저장 완료")}catch(t){if(console.error("❌ 분류 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveClassifiedData(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getClassifiedData(){try{if(this.config.useApiServer){const e=await m.getClassifiedData(),t=Array.isArray(e)?e:e.success&&e.data&&Array.isArray(e.data)?e.data:[];if(t.length>0){console.log("✅ API 서버에서 분류 데이터 조회 완료:",t.length,"개");try{await w.saveClassifiedData(t),console.log("✅ IndexedDB 캐시 갱신 완료")}catch(o){console.warn("⚠️ IndexedDB 캐시 갱신 실패 (데이터는 정상 반환):",o)}return t}}if(this.config.fallbackToLocal){const e=await w.loadClassifiedData();return console.log("⚠️ 로컬 IndexedDB에서 분류 데이터 조회 (서버 연결 실패)"),e}return[]}catch(e){if(console.error("❌ 분류 데이터 조회 실패:",e),this.config.fallbackToLocal){const t=await w.loadClassifiedData();return console.log("⚠️ 오류 발생, 로컬 IndexedDB 폴백"),t}return[]}}async saveUnclassifiedData(e){try{if(this.config.useApiServer)if(Array.isArray(e)&&e.length>500){const t=await this.adaptiveBatchUpload(e,o=>m.saveUnclassifiedData(o),"미분류 데이터");t.deadLetterItems.length>0&&console.warn(`⚠️ ${t.deadLetterItems.length}개 항목이 데드레터 큐로 이동됨`)}else{const t=await m.saveUnclassifiedData(e);if(t.success)console.log("✅ API 서버에 미분류 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveUnclassifiedData(e),console.log("✅ 로컬 IndexedDB에 미분류 데이터 저장 완료")}catch(t){if(console.error("❌ 미분류 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveUnclassifiedData(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getUnclassifiedData(){try{if(this.config.useApiServer){const e=await m.getUnclassifiedData(),t=Array.isArray(e)?e:e.success&&e.data&&Array.isArray(e.data)?e.data:[];if(t.length>0)return console.log("✅ API 서버에서 미분류 데이터 조회 완료:",t.length,"개"),t}if(this.config.fallbackToLocal){const e=await w.loadUnclassifiedData();return console.log("⚠️ 로컬 IndexedDB에서 미분류 데이터 조회"),e}return[]}catch(e){if(console.error("❌ 미분류 데이터 조회 실패:",e),console.error("❌ 에러 상세:",{message:e instanceof Error?e.message:"알 수 없는 오류",stack:e instanceof Error?e.stack:void 0,error:e}),this.config.fallbackToLocal){console.log("🔄 로컬 IndexedDB로 폴백 시도...");try{return await w.loadUnclassifiedData()}catch(t){return console.error("❌ 로컬 IndexedDB 조회도 실패:",t),[]}}return[]}}async loadUnclassifiedData(){try{const e=await w.loadUnclassifiedData();return console.log("✅ 하이브리드: IndexedDB에서 미분류 데이터 로드"),e}catch(e){return console.error("❌ 미분류 데이터 로드 실패:",e),[]}}async loadUnclassifiedDataByDate(e){try{const t=await w.loadUnclassifiedDataByDate(e);return console.log(`✅ 하이브리드: ${e} 날짜 데이터 로드`),t}catch(t){return console.error("❌ 날짜별 데이터 로드 실패:",t),[]}}async updateUnclassifiedData(e){try{await this.saveUnclassifiedData(e),console.log("✅ 하이브리드: 미분류 데이터 업데이트 완료")}catch(t){throw console.error("❌ 미분류 데이터 업데이트 실패:",t),t}}async loadClassifiedData(){try{const e=await w.loadClassifiedData();return console.log("✅ 하이브리드: IndexedDB에서 분류 데이터 로드"),e}catch(e){return console.error("❌ 분류 데이터 로드 실패:",e),[]}}async loadClassifiedByDate(e){try{const t=await w.loadClassifiedByDate(e);return console.log(`✅ 하이브리드: ${e} 날짜 분류 데이터 로드`),t||[]}catch(t){return console.error("❌ 날짜별 분류 데이터 로드 실패:",t),[]}}async saveDailyProgress(e){try{await w.saveDailyProgress(e),console.log("✅ 하이브리드: 일별 진행률 저장 완료")}catch(t){throw console.error("❌ 일별 진행률 저장 실패:",t),t}}async getAvailableDates(){try{const e=await w.getAvailableDates();return console.log("✅ 하이브리드: 사용 가능한 날짜 조회"),e}catch(e){return console.error("❌ 날짜 목록 조회 실패:",e),[]}}async saveSystemConfig(e,t){try{if(this.config.useApiServer){const o=await m.saveSystemConfig(e,t);if(o.success)console.log("✅ API 서버에 시스템 설정 저장 완료");else throw new Error(o.error||"API 저장 실패")}await w.saveSystemConfig(e,t),console.log("✅ 로컬 IndexedDB에 시스템 설정 저장 완료")}catch(o){if(console.error("❌ 시스템 설정 저장 실패:",o),this.config.fallbackToLocal)await w.saveSystemConfig(e,t),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw o}}async getSystemConfig(e){try{if(this.config.useApiServer){const t=await m.getSystemConfig(e);if(t.success&&t.data!==void 0)return console.log("✅ API 서버에서 시스템 설정 조회 완료"),t.data}if(this.config.fallbackToLocal){const t=await w.getSystemConfig(e);return console.log("⚠️ 로컬 IndexedDB에서 시스템 설정 조회"),t}return null}catch(t){return console.error("❌ 시스템 설정 조회 실패:",t),this.config.fallbackToLocal?await w.getSystemConfig(e):null}}async saveCategories(e){try{this.config.useApiServer&&console.log("⚠️ API 서버 카테고리 저장 기능은 아직 구현되지 않았습니다."),await w.saveCategories(e),console.log("✅ 로컬 IndexedDB에 세부카테고리 저장 완료")}catch(t){if(console.error("❌ 세부카테고리 저장 실패:",t),this.config.fallbackToLocal)await w.saveCategories(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async loadCategories(){try{if(this.config.useApiServer&&console.log("⚠️ API 서버 카테고리 조회 기능은 아직 구현되지 않았습니다."),this.config.fallbackToLocal){const e=await w.loadCategories();return console.log("✅ 로컬 IndexedDB에서 세부카테고리 조회"),e}return null}catch(e){return console.error("❌ 세부카테고리 조회 실패:",e),this.config.fallbackToLocal?await w.loadCategories():null}}async testApiConnection(){try{return(await m.testConnection()).success}catch(e){return console.error("❌ API 서버 연결 테스트 실패:",e),!1}}async syncToApi(){try{console.log("🔄 데이터 동기화 시작...");const e=await w.getChannels();Object.keys(e).length>0&&await this.saveChannels(e);const t=await w.getVideos();Object.keys(t).length>0&&await this.saveVideos(t);const o=await w.getClassifiedData();o.length>0&&await this.saveClassifiedData(o);const i=await w.loadUnclassifiedData();i.length>0&&await this.saveUnclassifiedData(i),console.log("✅ 데이터 동기화 완료")}catch(e){throw console.error("❌ 데이터 동기화 실패:",e),e}}async safeUpdateVideo(e,t){try{if(this.config.useApiServer){const o=await m.updateVideo(e,t);if(o.success)return console.log(`✅ 비디오 업데이트 성공: ${e}`),{success:!0};throw new Error(o.error||"Update failed")}}catch(o){console.warn("⚠️ 서버 업데이트 실패, 아웃박스에 추가:",o);try{const i=await P.addToOutbox("update",`/api/videos/${e}`,t);return console.log(`📦 아웃박스에 추가됨: ${i}`),{success:!1,outboxId:i}}catch(i){throw console.error("❌ 아웃박스 추가 실패:",i),i}}return{success:!1}}async safeDeleteVideo(e){try{if(this.config.useApiServer){const t=await m.deleteVideo(e);if(t.success)return console.log(`✅ 비디오 삭제 성공: ${e}`),{success:!0};throw new Error(t.error||"Delete failed")}}catch(t){console.warn("⚠️ 서버 삭제 실패, 아웃박스에 추가:",t);try{const o=await P.addToOutbox("delete",`/api/videos/${e}`,{});return console.log(`📦 아웃박스에 추가됨: ${o}`),{success:!1,outboxId:o}}catch(o){throw console.error("❌ 아웃박스 추가 실패:",o),o}}return{success:!1}}async safeDeleteVideosBatch(e){try{if(this.config.useApiServer){const t=await m.deleteVideosBatch(e);if(t.success)return console.log(`✅ 배치 삭제 성공: ${e.length}개`),{success:!0};throw new Error(t.error||"Batch delete failed")}}catch(t){console.warn("⚠️ 서버 배치 삭제 실패, 아웃박스에 추가:",t);try{const o=await P.addToOutbox("delete","/api/videos/batch",{ids:e});return console.log(`📦 아웃박스에 추가됨: ${o}`),{success:!1,outboxId:o}}catch(o){throw console.error("❌ 아웃박스 추가 실패:",o),o}}return{success:!1}}initializeOutbox(){console.log("📦 아웃박스 서비스 초기화"),P.startAutoProcess()}async getOutboxStats(){return await P.getStats()}async processOutbox(){return await P.processOutbox()}}const L=new O,M=Object.freeze(Object.defineProperty({__proto__:null,hybridService:L},Symbol.toStringTag,{value:"Module"}));export{m as a,U as b,M as c,L as h,w as i};
