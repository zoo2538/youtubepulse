var q=Object.defineProperty;var E=(I,e,t)=>e in I?q(I,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):I[e]=t;var C=(I,e,t)=>E(I,typeof e!="symbol"?e+"":e,t);class B{constructor(){C(this,"dbName","YouTubePulseDB");C(this,"version",2);C(this,"db",null)}async restartConnection(){console.log("🔄 IndexedDB 연결 재시작 중..."),this.db&&(this.db.close(),this.db=null),await new Promise(e=>setTimeout(e,500)),await this.init(),console.log("✅ IndexedDB 연결 재시작 완료")}async init(){return this.db&&(this.db.close(),this.db=null),await new Promise(e=>setTimeout(e,200)),new Promise((e,t)=>{const s=indexedDB.open(this.dbName,this.version);s.onerror=()=>{console.error("IndexedDB 초기화 실패:",s.error),t(s.error)},s.onsuccess=()=>{this.db=s.result,console.log("✅ IndexedDB 초기화 성공:",this.dbName),e()},s.onupgradeneeded=i=>{const a=i.target.result;if(a.objectStoreNames.contains("unclassifiedData")){const r=a.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData");r.indexNames.contains("videoDay")||r.createIndex("videoDay",["videoId","dayKeyLocal"],{unique:!0}),r.indexNames.contains("dayKeyLocal")||r.createIndex("dayKeyLocal","dayKeyLocal",{unique:!1})}else{const o=a.createObjectStore("unclassifiedData",{keyPath:"id"});o.createIndex("channelName","channelName",{unique:!1}),o.createIndex("status","status",{unique:!1}),o.createIndex("category","category",{unique:!1}),o.createIndex("videoDay",["videoId","dayKeyLocal"],{unique:!0}),o.createIndex("dayKeyLocal","dayKeyLocal",{unique:!1})}if(!a.objectStoreNames.contains("classifiedData")){const o=a.createObjectStore("classifiedData",{keyPath:"id"});o.createIndex("channelName","channelName",{unique:!1}),o.createIndex("category","category",{unique:!1})}if(a.objectStoreNames.contains("channels")||a.createObjectStore("channels",{keyPath:"id"}).createIndex("name","name",{unique:!1}),!a.objectStoreNames.contains("videos")){const o=a.createObjectStore("videos",{keyPath:"id"});o.createIndex("channelId","channelId",{unique:!1}),o.createIndex("uploadDate","uploadDate",{unique:!1})}a.objectStoreNames.contains("categories")?(a.deleteObjectStore("categories"),a.createObjectStore("categories",{autoIncrement:!0})):a.createObjectStore("categories",{autoIncrement:!0}),a.objectStoreNames.contains("subCategories")||a.createObjectStore("subCategories",{keyPath:"id",autoIncrement:!0}).createIndex("category","category",{unique:!1}),a.objectStoreNames.contains("systemConfig")||a.createObjectStore("systemConfig",{keyPath:"key"}),a.objectStoreNames.contains("dailySummary")||a.createObjectStore("dailySummary",{keyPath:"date"}).createIndex("date","date",{unique:!0}),a.objectStoreNames.contains("dailyProgress")||a.createObjectStore("dailyProgress",{autoIncrement:!0}),a.objectStoreNames.contains("classifiedByDate")||a.createObjectStore("classifiedByDate",{keyPath:"date"}).createIndex("date","date",{unique:!0})}})}async replaceAllUnclassifiedData(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),o=a.clear();o.onsuccess=()=>{let r=0;const c=e.length;if(c===0){t();return}e.forEach(n=>{const d=a.put(n);d.onsuccess=()=>{r++,r===c&&t()},d.onerror=()=>s(d.error)})},o.onerror=()=>s(o.error)})}async saveUnclassifiedData(e){if(this.db||await this.init(),e.length===0)return Promise.resolve();console.log(`🔄 백업 복원 시작: ${e.length}개 항목`);const t=e.map(a=>{const o=this.normalizeDayKey(a.dayKeyLocal||a.collectionDate||a.uploadDate);return{...a,dayKeyLocal:o,id:a.id||`${Date.now()}_${Math.random().toString(36).substr(2,9)}_${Math.random().toString(36).substr(2,9)}`}});console.log(`✅ 날짜 키 단일화 완료: ${t.length}개 항목`);const s=new Map;t.forEach(a=>{const o=`${a.videoId}|${a.dayKeyLocal}`;if(s.has(o)){const r=s.get(o),c={...r,...a,viewCount:Math.max(r.viewCount||0,a.viewCount||0),likeCount:Math.max(r.likeCount||0,a.likeCount||0),status:a.status==="classified"?"classified":r.status,category:a.category||r.category,subCategory:a.subCategory||r.subCategory};s.set(o,c)}else s.set(o,a)});const i=Array.from(s.values());return console.log(`🔄 중복 제거 완료: ${t.length}개 → ${i.length}개`),new Promise((a,o)=>{const r=this.db.transaction(["unclassifiedData"],"readwrite"),c=r.objectStore("unclassifiedData"),n=c.clear();n.onsuccess=()=>{console.log("🗑️ 기존 데이터 삭제 완료");let d=0,u=0;const l=i.length;console.log(`🔄 새 데이터 저장 시작: ${l}개 항목`),i.forEach((g,h)=>{const y=c.put(g);y.onsuccess=()=>{d++,d+u===l&&(console.log(`✅ 백업 복원 완료: ${d}개 성공, ${u}개 실패`),a())},y.onerror=()=>{console.warn(`항목 ${h} 저장 실패:`,y.error),u++,d+u===l&&(console.log(`✅ 백업 복원 완료: ${d}개 성공, ${u}개 실패`),a())}})},n.onerror=()=>{console.error("❌ 기존 데이터 삭제 실패:",n.error),o(n.error)},r.oncomplete=()=>{console.log("🎉 백업 복원 트랜잭션 완료")},r.onerror=()=>{console.error("❌ 백업 복원 트랜잭션 실패:",r.error),o(r.error)}})}normalizeDayKey(e){if(!e)return new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"});try{const t=new Date(e);return isNaN(t.getTime())?new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"}):t.toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"})}catch(t){return console.warn("날짜 키 변환 실패:",e,t),new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"})}}async loadUnclassifiedData(){return this.db||await this.init(),new Promise((e,t)=>{try{const a=this.db.transaction(["unclassifiedData"],"readonly").objectStore("unclassifiedData").getAll();a.onsuccess=()=>{console.log("✅ IndexedDB에서 미분류 데이터 로드:",a.result.length,"개"),e(a.result)},a.onerror=()=>{console.error("❌ 미분류 데이터 로드 실패:",a.error),t(a.error)}}catch(s){console.error("❌ IndexedDB 트랜잭션 실패:",s),t(s)}})}async loadUnclassifiedDataByDate(e){return this.db||await this.init(),new Promise((t,s)=>{const o=this.db.transaction(["unclassifiedData"],"readonly").objectStore("unclassifiedData").getAll();o.onsuccess=()=>{const r=o.result.filter(c=>(c.collectionDate||c.uploadDate)===e);t(r)},o.onerror=()=>s(o.error)})}async getAvailableDates(){return this.db||await this.init(),new Promise((e,t)=>{try{const s=new Set;let i=0;const a=3,o=()=>{if(i++,i===a){const f=new Date,D=new Date(f.getTime()+9*60*60*1e3),$=D.toISOString().split("T")[0];for(let m=0;m<7;m++){const x=new Date(D.getTime()-m*24*60*60*1e3).toISOString().split("T")[0];s.add(x)}const b=Array.from(s).sort((m,p)=>p.localeCompare(m));console.log(`📅 사용 가능한 날짜들 (7일 범위 자동 생성): ${b.length}개`,b),e(b)}},n=this.db.transaction(["unclassifiedData"],"readonly").objectStore("unclassifiedData").getAll();n.onsuccess=()=>{n.result.forEach(f=>{const D=f.collectionDate||f.uploadDate;D&&s.add(D)}),console.log(`📊 unclassifiedData에서 ${n.result.length}개 항목 조회`),o()},n.onerror=()=>{console.error("❌ unclassifiedData 조회 실패:",n.error),o()};const l=this.db.transaction(["classifiedData"],"readonly").objectStore("classifiedData").getAll();l.onsuccess=()=>{l.result.forEach(f=>{const D=f.collectionDate||f.uploadDate;D&&s.add(D)}),console.log(`📊 classifiedData에서 ${l.result.length}개 항목 조회`),o()},l.onerror=()=>{console.error("classifiedData 조회 실패:",l.error),o()};const y=this.db.transaction(["dailyProgress"],"readonly").objectStore("dailyProgress").getAll();y.onsuccess=()=>{y.result.forEach(f=>{f.date&&s.add(f.date)}),console.log(`📊 dailyProgress에서 ${y.result.length}개 항목 조회`),o()},y.onerror=()=>{console.error("❌ dailyProgress 조회 실패:",y.error),o()}}catch(s){console.error("❌ getAvailableDates 트랜잭션 실패:",s),this.restartConnection().then(()=>{console.log("🔄 연결 재시작 후 다시 시도"),e([])}).catch(()=>{t(s)})}})}async saveClassifiedData(e){return this.db||await this.init(),Array.isArray(e)?new Promise((t,s)=>{const a=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData"),o=a.clear();o.onsuccess=()=>{let r=0;const c=e.length;if(c===0){t();return}e.forEach(n=>{const d=a.put(n);d.onsuccess=()=>{r++,r===c&&t()},d.onerror=()=>s(d.error)})},o.onerror=()=>s(o.error)}):(console.error("❌ saveClassifiedData: data가 배열이 아닙니다:",typeof e,e),Promise.reject(new Error("Data must be an array")))}async loadClassifiedData(){return this.db||await this.init(),new Promise((e,t)=>{const a=this.db.transaction(["classifiedData"],"readonly").objectStore("classifiedData").getAll();a.onsuccess=()=>e(a.result),a.onerror=()=>t(a.error)})}async updateClassifiedDataByDate(e,t){return this.db||await this.init(),new Promise((s,i)=>{const o=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData"),r=o.getAll();r.onsuccess=()=>{const d=[...r.result.filter(l=>(l.collectionDate||l.uploadDate)!==t),...e],u=o.clear();u.onsuccess=()=>{let l=0;const g=d.length;if(g===0){s();return}d.forEach((h,y)=>{h.id||(h.id=Date.now()+y);const f=o.put(h);f.onsuccess=()=>{l++,l===g&&(console.log(`✅ ${t} 날짜 데이터 업데이트 완료: ${e.length}개 추가/수정`),s())},f.onerror=()=>i(f.error)})},u.onerror=()=>i(u.error)},r.onerror=()=>i(r.error)})}async updateUnclassifiedData(e){return this.db||await this.init(),console.log("💾 IndexedDB 업데이트 - unclassifiedData:",e.length,"개"),console.log("💾 데이터 샘플 (카테고리/세부카테고리):",e.slice(0,3).map(t=>({category:t.category,subCategory:t.subCategory,channelName:t.channelName}))),new Promise((t,s)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData");let o=0;const r=e.length;if(r===0){t();return}e.forEach((c,n)=>{c.id||(c.id=Date.now()+n);const d=a.put(c);d.onsuccess=()=>{o++,o===r&&t()},d.onerror=()=>s(d.error)})})}async updateUnclassifiedDataByDate(e,t){return this.db||await this.init(),console.log(`💾 IndexedDB 날짜별 업데이트 - ${t}:`,e.length,"개"),console.log("💾 데이터 샘플 (카테고리/세부카테고리):",e.slice(0,3).map(s=>({category:s.category,subCategory:s.subCategory,channelName:s.channelName}))),new Promise((s,i)=>{const o=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),r=o.getAll();r.onsuccess=()=>{const d=[...r.result.filter(l=>(l.collectionDate||l.uploadDate)!==t),...e],u=o.clear();u.onsuccess=()=>{let l=0;const g=d.length;if(g===0){console.log(`✅ ${t} 날짜 데이터 업데이트 완료: ${e.length}개 추가/수정`),s();return}d.forEach((h,y)=>{h.id||(h.id=Date.now()+y);const f=o.put(h);f.onsuccess=()=>{l++,l===g&&(console.log(`✅ ${t} 날짜 데이터 업데이트 완료: ${e.length}개 추가/수정`),s())},f.onerror=()=>i(f.error)})},u.onerror=()=>i(u.error)},r.onerror=()=>i(r.error)})}async updateClassifiedData(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData");let o=0;const r=e.length;if(r===0){t();return}e.forEach((c,n)=>{c.id||(c.id=Date.now()+n);const d=a.put(c);d.onsuccess=()=>{o++,o===r&&t()},d.onerror=()=>s(d.error)})})}async saveChannels(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["channels"],"readwrite").objectStore("channels"),o=a.clear();o.onsuccess=()=>{const r=Object.entries(e);let c=0;const n=r.length;if(n===0){t();return}r.forEach(([d,u])=>{const l=a.put({id:d,...u});l.onsuccess=()=>{c++,c===n&&t()},l.onerror=()=>s(l.error)})},o.onerror=()=>s(o.error)})}async saveVideos(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["videos"],"readwrite").objectStore("videos"),o=a.clear();o.onsuccess=()=>{const r=Object.entries(e);let c=0;const n=r.length;if(n===0){t();return}r.forEach(([d,u])=>{Array.isArray(u)&&u.forEach(l=>{const g=a.put({...l,channelId:d});g.onsuccess=()=>{c++,c===n&&t()},g.onerror=()=>s(g.error)})})},o.onerror=()=>s(o.error)})}async saveCategories(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["subCategories"],"readwrite").objectStore("subCategories"),o=a.clear();o.onsuccess=()=>{const r=a.put({id:1,type:"categories",data:e,timestamp:new Date().toISOString()});r.onsuccess=()=>{console.log("✅ 카테고리 저장 완료:",e),t()},r.onerror=c=>{console.error("❌ 카테고리 저장 실패:",c),s(r.error)}},o.onerror=r=>{console.error("❌ 카테고리 삭제 실패:",r),s(o.error)}})}async loadCategories(){return this.db||await this.init(),new Promise((e,t)=>{const a=this.db.transaction(["subCategories"],"readonly").objectStore("subCategories").getAll();a.onsuccess=()=>{const r=a.result.filter(c=>c.type==="categories").sort((c,n)=>new Date(n.timestamp).getTime()-new Date(c.timestamp).getTime())[0];e((r==null?void 0:r.data)||null)},a.onerror=()=>t(a.error)})}async saveDailyProgress(e){this.db||await this.init(),console.log("🔍 saveDailyProgress 호출됨 - 매개변수:",typeof e,e);let t=[];if(Array.isArray(e))t=e.filter(s=>s&&typeof s=="object"),console.log("🔍 배열로 처리됨:",t.length,"개 항목");else if(e&&typeof e=="object")t=[e],console.log("🔍 객체로 처리됨:",t[0]);else return console.error("❌ saveDailyProgress: 유효하지 않은 데이터 타입:",typeof e,e),Promise.resolve();return new Promise((s,i)=>{const o=this.db.transaction(["dailyProgress"],"readwrite").objectStore("dailyProgress"),r=o.clear();r.onsuccess=()=>{let c=0;const n=t.length;if(n===0){s();return}t.forEach((d,u)=>{const l={...d};l.id||(l.id=Date.now()+u);const g=o.put(l);g.onsuccess=()=>{c++,c===n&&s()},g.onerror=()=>i(g.error)})},r.onerror=()=>i(r.error)})}async saveSubCategories(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["subCategories"],"readwrite").objectStore("subCategories"),o=a.clear();o.onsuccess=()=>{const r=Object.entries(e);let c=0;const n=r.length;if(n===0){t();return}r.forEach(([d,u])=>{Array.isArray(u)&&u.forEach(l=>{const g=a.put({category:d,subCategory:l});g.onsuccess=()=>{c++,c===n&&t()},g.onerror=()=>s(g.error)})})},o.onerror=()=>s(o.error)})}async loadSubCategories(){return this.db||await this.init(),new Promise((e,t)=>{const s={},o=this.db.transaction(["subCategories"],"readonly").objectStore("subCategories").getAll();o.onsuccess=()=>{(o.result||[]).forEach(c=>{const n=c.category,d=c.subCategory;!n||!d||(s[n]||(s[n]=[]),s[n].includes(d)||s[n].push(d))}),e(s)},o.onerror=()=>t(o.error)})}async saveSystemConfig(e,t){return this.db||await this.init(),new Promise((s,i)=>{const r=this.db.transaction(["systemConfig"],"readwrite").objectStore("systemConfig").put({key:e,value:t});r.onsuccess=()=>s(),r.onerror=()=>i(r.error)})}async loadSystemConfig(e){return this.db||await this.init(),new Promise((t,s)=>{const o=this.db.transaction(["systemConfig"],"readonly").objectStore("systemConfig").get(e);o.onsuccess=()=>{var r;return t((r=o.result)==null?void 0:r.value)},o.onerror=()=>s(o.error)})}async clearDatabase(){return new Promise((e,t)=>{const s=indexedDB.deleteDatabase(this.dbName);s.onsuccess=()=>{this.db=null,e()},s.onerror=()=>t(s.error)})}async saveDailySummary(e,t){return this.db||await this.init(),new Promise((s,i)=>{const o=this.db.transaction(["dailySummary"],"readwrite").objectStore("dailySummary"),r={date:e};t&&typeof t=="object"&&!Array.isArray(t)&&Object.keys(t).forEach(n=>{n!=="date"&&(r[n]=t[n])}),console.log("💾 saveDailySummary 호출:",{date:e,summaryKeys:t?Object.keys(t):[],dataToSaveKeys:Object.keys(r)});const c=o.put(r);c.onsuccess=()=>{console.log("✅ dailySummary 저장 성공:",e),s()},c.onerror=()=>{console.error("❌ dailySummary 저장 실패:",c.error,{date:e,dataToSave:r}),i(c.error)}})}async loadDailySummary(e){return this.db||await this.init(),new Promise((t,s)=>{const o=this.db.transaction(["dailySummary"],"readonly").objectStore("dailySummary").get(e);o.onsuccess=()=>t(o.result||null),o.onerror=()=>s(o.error)})}async saveClassifiedByDate(e,t){return this.db||await this.init(),new Promise((s,i)=>{const r=this.db.transaction(["classifiedByDate"],"readwrite").objectStore("classifiedByDate").put({date:e,items:t});r.onsuccess=()=>s(),r.onerror=()=>i(r.error)})}async loadClassifiedByDate(e){return this.db||await this.init(),new Promise((t,s)=>{const o=this.db.transaction(["classifiedByDate"],"readonly").objectStore("classifiedByDate").get(e);o.onsuccess=()=>{const r=o.result;t((r==null?void 0:r.items)||null)},o.onerror=()=>s(o.error)})}async updateAllCollectionDates(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),o=a.getAll();o.onsuccess=()=>{const r=o.result;console.log(`📊 전체 데이터: ${r.length}개`);const c=r.map(u=>({...u,collectionDate:e}));let n=0,d=0;c.forEach((u,l)=>{const g=a.put(u);g.onsuccess=()=>{n++,n%100===0&&console.log(`✅ ${n}/${r.length} 업데이트 완료`),n+d===r.length&&(console.log(`🎉 업데이트 완료! 총 ${n}개 데이터를 ${e}로 변경`),t(n))},g.onerror=()=>{d++,console.error(`❌ ${l+1}번째 데이터 업데이트 실패:`,g.error),n+d===r.length&&(console.log(`⚠️ 업데이트 완료: ${n}개 성공, ${d}개 실패`),t(n))}})},o.onerror=()=>{s(o.error)}})}async listClassifiedDates(){return this.db||await this.init(),new Promise((e,t)=>{const a=this.db.transaction(["classifiedByDate"],"readonly").objectStore("classifiedByDate").getAllKeys();a.onsuccess=()=>{const o=a.result||[];e(o)},a.onerror=()=>t(a.error)})}async cleanupOldData(e=14){this.db||await this.init();const t=new Date;t.setDate(t.getDate()-e);const s=t.toISOString().split("T")[0];let i=0;const o=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),r=o.getAll();await new Promise(D=>{r.onsuccess=()=>{r.result.filter(b=>new Date(b.uploadDate)<t).forEach(b=>{o.delete(b.id),i++}),D()}});const n=this.db.transaction(["classifiedData"],"readwrite").objectStore("classifiedData"),d=n.getAll();await new Promise(D=>{d.onsuccess=()=>{d.result.filter(b=>new Date(b.uploadDate)<t).forEach(b=>{n.delete(b.id),i++}),D()}});const l=this.db.transaction(["videos"],"readwrite").objectStore("videos"),g=l.getAll();await new Promise(D=>{g.onsuccess=()=>{g.result.filter(b=>new Date(b.uploadDate)<t).forEach(b=>{l.delete(b.id),i++}),D()}});const y=this.db.transaction(["dailySummary"],"readwrite").objectStore("dailySummary"),f=y.getAll();return await new Promise(D=>{f.onsuccess=()=>{(f.result||[]).forEach(b=>{const m=((b==null?void 0:b.date)||"").toString();m&&m<s&&(y.delete(b.date),i++)}),D()}}),console.log(`🧹 7일 데이터 정리 완료: ${i}개 데이터 삭제`),i}async getDatabaseInfo(){this.db||await this.init();const e={name:this.dbName,version:this.version,objectStores:Array.from(this.db.objectStoreNames),size:0,retentionDays:7,lastCleanup:null};for(const t of e.objectStores){const a=this.db.transaction([t],"readonly").objectStore(t).count();await new Promise(o=>{a.onsuccess=()=>{e.size+=a.result,o()}})}try{const t=await this.loadSystemConfig("retentionDays");typeof t=="number"&&t>0&&(e.retentionDays=t)}catch{}return e}async deleteUnclassifiedDataByIds(e){return this.db||await this.init(),new Promise((t,s)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData");let o=0;const r=e.length;if(r===0){t();return}e.forEach(c=>{const n=a.delete(c);n.onsuccess=()=>{o++,o===r&&(console.log(`✅ IndexedDB에서 ${r}개 데이터 삭제 완료`),t())},n.onerror=()=>{console.error(`❌ ID ${c} 삭제 실패:`,n.error),s(n.error)}})})}async deleteDataByDate(e){return this.db||await this.init(),console.log(`🗑️ ${e} 날짜 데이터 삭제 시작...`),new Promise((t,s)=>{const i=this.db.transaction(["unclassifiedData","classifiedData"],"readwrite"),a=i.objectStore("unclassifiedData"),o=i.objectStore("classifiedData");let r=!1,c=!1,n=0;const d=()=>{r&&c&&(console.log(`✅ ${e} 날짜 데이터 삭제 완료: ${n}개 삭제`),t())},u=a.getAll();u.onsuccess=()=>{const h=u.result.filter(y=>{const f=y.collectionDate||y.uploadDate;return f&&f.split("T")[0]===e});if(console.log(`📊 unclassifiedData에서 삭제할 데이터: ${h.length}개`),h.length===0)r=!0,d();else{let y=0;h.forEach(f=>{const D=a.delete(f.id);D.onsuccess=()=>{y++,n++,y===h.length&&(r=!0,d())},D.onerror=()=>s(D.error)})}};const l=o.getAll();l.onsuccess=()=>{const h=l.result.filter(y=>{const f=y.collectionDate||y.uploadDate;return f&&f.split("T")[0]===e});if(console.log(`📊 classifiedData에서 삭제할 데이터: ${h.length}개`),h.length===0)c=!0,d();else{let y=0;h.forEach(f=>{const D=o.delete(f.id);D.onsuccess=()=>{y++,n++,y===h.length&&(c=!0,d())},D.onerror=()=>s(D.error)})}},u.onerror=()=>s(u.error),l.onerror=()=>s(l.error)})}async idempotentUpsertUnclassifiedData(e){if(!this.db)throw new Error("Database not initialized");return new Promise((t,s)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),o=a.index("videoDay");let r=0,c=0,n=0;const d=e.length;if(d===0){t();return}console.log(`🔄 IndexedDB 멱등 복원 시작: ${d}개 레코드`),e.forEach(u=>{if(!u.dayKeyLocal&&u.collectionDate){const h=new Date(u.collectionDate);u.dayKeyLocal=h.toISOString().split("T")[0]}const l=[u.videoId,u.dayKeyLocal],g=o.get(l);g.onsuccess=()=>{if(g.result){const h=g.result,y={...h,viewCount:Math.max(h.viewCount||0,u.viewCount||0),likeCount:Math.max(h.likeCount||0,u.likeCount||0),channelName:u.channelName||h.channelName,videoTitle:u.videoTitle||h.videoTitle,videoDescription:u.videoDescription||h.videoDescription,thumbnailUrl:u.thumbnailUrl||h.thumbnailUrl,category:u.category||h.category,subCategory:u.subCategory||h.subCategory,status:u.status||h.status,updatedAt:new Date().toISOString()},f=a.put(y);f.onsuccess=()=>{c++,r++,r===d&&(console.log(`✅ IndexedDB 멱등 복원 완료: 병합 ${c}개, 신규 ${n}개`),t())},f.onerror=()=>{console.error("IndexedDB 병합 실패:",f.error),r++,r===d&&t()}}else{const h={...u,id:u.id||Date.now().toString()+Math.random().toString(36).substr(2,9),createdAt:u.createdAt||new Date().toISOString(),updatedAt:new Date().toISOString()},y=a.put(h);y.onsuccess=()=>{n++,r++,r===d&&(console.log(`✅ IndexedDB 멱등 복원 완료: 병합 ${c}개, 신규 ${n}개`),t())},y.onerror=()=>{console.error("IndexedDB 추가 실패:",y.error),r++,r===d&&t()}}},g.onerror=()=>{console.error("IndexedDB 조회 실패:",g.error),r++,r===d&&t()}})})}async upsertUnclassifiedDataWithMaxValues(e){if(!this.db)throw new Error("Database not initialized");return new Promise((t,s)=>{const a=this.db.transaction(["unclassifiedData"],"readwrite").objectStore("unclassifiedData"),o=a.index("videoDay");let r=0;const c=e.length;if(c===0){t();return}e.forEach(n=>{if(!n.dayKeyLocal&&n.collectionDate){const l=new Date(n.collectionDate);n.dayKeyLocal=l.toISOString().split("T")[0]}const d=[n.videoId,n.dayKeyLocal],u=o.get(d);u.onsuccess=()=>{if(u.result){const l=u.result,g={...l,viewCount:Math.max(l.viewCount||0,n.viewCount||0),likeCount:Math.max(l.likeCount||0,n.likeCount||0),channelName:n.channelName||l.channelName,videoTitle:n.videoTitle||l.videoTitle,videoDescription:n.videoDescription||l.videoDescription,thumbnailUrl:n.thumbnailUrl||l.thumbnailUrl,category:n.category||l.category,subCategory:n.subCategory||l.subCategory,status:n.status||l.status,updatedAt:new Date().toISOString()},h=a.put(g);h.onsuccess=()=>{r++,r===c&&t()},h.onerror=()=>s(h.error)}else{n.id||(n.id=`${Date.now()}_${Math.random().toString(36).substr(2,9)}`);const l=a.put(n);l.onsuccess=()=>{r++,r===c&&t()},l.onerror=()=>s(l.error)}},u.onerror=()=>s(u.error)})})}}const w=new B,U=Object.freeze(Object.defineProperty({__proto__:null,indexedDBService:w},Symbol.toStringTag,{value:"Module"})),R="https://api.youthbepulse.com";class j{constructor(){C(this,"baseURL");this.baseURL=R}async request(e,t={}){try{const s=`${this.baseURL}${e}`,i=new AbortController,a=setTimeout(()=>i.abort(),6e4),o=await fetch(s,{headers:{"Content-Type":"application/json",...t.headers},signal:i.signal,...t});if(clearTimeout(a),!o.ok){let c="";try{const n=await o.json();c=JSON.stringify(n,null,2)}catch{c=`Status: ${o.status}, StatusText: ${o.statusText}`}throw console.error("🚨 서버 에러 상세:",{status:o.status,statusText:o.statusText,url:s,details:c,headers:Object.fromEntries(o.headers.entries())}),new Error(`HTTP error! status: ${o.status} - ${c}`)}return{success:!0,data:await o.json()}}catch(s){return console.error("API 요청 실패:",s),s instanceof Error&&s.name==="AbortError"?{success:!1,error:"Request timeout (60s)"}:{success:!1,error:s instanceof Error?s.message:"Unknown error"}}}async saveChannels(e){return this.request("/api/channels",{method:"POST",body:JSON.stringify({channels:e})})}async getChannels(){return this.request("/api/channels")}async saveVideos(e){return this.request("/api/videos",{method:"POST",body:JSON.stringify({videos:e})})}async getVideos(){return this.request("/api/videos")}async saveClassifiedData(e){return this.request("/api/classified",{method:"POST",body:JSON.stringify(e)})}async getClassifiedData(){return this.request("/api/classified")}async saveUnclassifiedData(e){return this.request("/api/unclassified",{method:"POST",body:JSON.stringify(e)})}async getUnclassifiedData(){return this.request("/api/unclassified")}async getDataIds(){return this.request("/api/data/ids")}async saveSystemConfig(e,t){return this.request("/api/system/config",{method:"POST",body:JSON.stringify({key:e,value:t})})}async getSystemConfig(e){return this.request(`/api/system/config/${e}`)}async saveDailyStats(e,t){return this.request("/api/daily-stats",{method:"POST",body:JSON.stringify({date:e,stats:t})})}async getDailyStats(e){const t=e?`/api/daily-stats/${e}`:"/api/daily-stats";return this.request(t)}async testConnection(){return this.request("/api/health")}async updateVideo(e,t){return this.request(`/api/videos/${e}`,{method:"PATCH",body:JSON.stringify(t)})}async deleteVideo(e){return this.request(`/api/videos/${e}`,{method:"DELETE"})}async deleteVideosBatch(e){return this.request("/api/videos/batch",{method:"DELETE",body:JSON.stringify({ids:e})})}}const S=new j;class N{constructor(e={}){C(this,"dbName","YouTubePulseOutbox");C(this,"dbVersion",1);C(this,"storeName","outbox");C(this,"config");this.config={maxRetries:3,retryDelay:5e3,batchSize:10,...e}}async initDB(){return new Promise((e,t)=>{const s=indexedDB.open(this.dbName,this.dbVersion);s.onerror=()=>t(s.error),s.onsuccess=()=>e(s.result),s.onupgradeneeded=i=>{const a=i.target.result;if(!a.objectStoreNames.contains(this.storeName)){const o=a.createObjectStore(this.storeName,{keyPath:"id"});o.createIndex("timestamp","timestamp"),o.createIndex("status","status"),o.createIndex("type","type")}}})}async addToOutbox(e,t,s){const i=`outbox_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,a={id:i,type:e,endpoint:t,payload:s,timestamp:Date.now(),retries:0,maxRetries:this.config.maxRetries,status:"pending"};try{const c=(await this.initDB()).transaction([this.storeName],"readwrite").objectStore(this.storeName);return await new Promise((n,d)=>{const u=c.add(a);u.onsuccess=()=>n(),u.onerror=()=>d(u.error)}),console.log(`📦 아웃박스 추가: ${e} ${t}`,a),i}catch(o){throw console.error("❌ 아웃박스 추가 실패:",o),o}}async getPendingItems(){try{const i=(await this.initDB()).transaction([this.storeName],"readonly").objectStore(this.storeName).index("status");return new Promise((a,o)=>{const r=i.getAll("pending");r.onsuccess=()=>a(r.result),r.onerror=()=>o(r.error)})}catch(e){return console.error("❌ 대기 작업 조회 실패:",e),[]}}async updateItemStatus(e,t,s){try{const o=(await this.initDB()).transaction([this.storeName],"readwrite").objectStore(this.storeName),r=o.get(e);await new Promise((c,n)=>{r.onsuccess=()=>{const d=r.result;if(d){d.status=t,d.error=s,t==="failed"&&(d.retries+=1);const u=o.put(d);u.onsuccess=()=>c(),u.onerror=()=>n(u.error)}else n(new Error("Item not found"))},r.onerror=()=>n(r.error)}),console.log(`📦 아웃박스 상태 업데이트: ${e} → ${t}`)}catch(i){throw console.error("❌ 아웃박스 상태 업데이트 실패:",i),i}}async removeCompletedItems(){try{const s=(await this.initDB()).transaction([this.storeName],"readwrite").objectStore(this.storeName),i=s.index("status");await new Promise((a,o)=>{const r=i.getAllKeys("completed");r.onsuccess=()=>{const c=r.result;if(c.length===0){a();return}let n=0;c.forEach(d=>{const u=s.delete(d);u.onsuccess=()=>{n++,n===c.length&&a()},u.onerror=()=>o(u.error)})},r.onerror=()=>o(r.error)}),console.log("🗑️ 완료된 아웃박스 작업 제거 완료")}catch(e){console.error("❌ 완료된 작업 제거 실패:",e)}}async processOutbox(){const e=await this.getPendingItems();if(e.length===0)return console.log("📦 처리할 아웃박스 작업 없음"),{success:0,failed:0};console.log(`📦 아웃박스 처리 시작: ${e.length}개 작업`);let t=0,s=0;for(let i=0;i<e.length;i+=this.config.batchSize){const a=e.slice(i,i+this.config.batchSize);await Promise.allSettled(a.map(async o=>{try{if(o.retries>=o.maxRetries){await this.updateItemStatus(o.id,"failed","Max retries exceeded"),s++;return}const r=await fetch(o.endpoint,{method:o.type==="update"?"PATCH":o.type==="delete"?"DELETE":"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o.payload)});if(r.ok)await this.updateItemStatus(o.id,"completed"),t++,console.log(`✅ 아웃박스 작업 성공: ${o.type} ${o.endpoint}`);else throw new Error(`HTTP ${r.status}: ${r.statusText}`)}catch(r){console.error(`❌ 아웃박스 작업 실패: ${o.type} ${o.endpoint}`,r),await this.updateItemStatus(o.id,"failed",r instanceof Error?r.message:"Unknown error"),s++}})),i+this.config.batchSize<e.length&&await new Promise(o=>setTimeout(o,1e3))}return await this.removeCompletedItems(),console.log(`📦 아웃박스 처리 완료: 성공 ${t}개, 실패 ${s}개`),{success:t,failed:s}}startAutoProcess(){navigator.onLine&&setTimeout(()=>this.processOutbox(),2e3),window.addEventListener("online",()=>{console.log("🌐 온라인 상태 감지 - 아웃박스 처리 시작"),setTimeout(()=>this.processOutbox(),1e3)}),setInterval(()=>{navigator.onLine&&this.processOutbox()},5*60*1e3)}async getStats(){try{const s=(await this.initDB()).transaction([this.storeName],"readonly").objectStore(this.storeName),i=await new Promise((a,o)=>{const r=s.getAll();r.onsuccess=()=>a(r.result),r.onerror=()=>o(r.error)});return{pending:i.filter(a=>a.status==="pending").length,failed:i.filter(a=>a.status==="failed").length,completed:i.filter(a=>a.status==="completed").length}}catch(e){return console.error("❌ 아웃박스 통계 조회 실패:",e),{pending:0,failed:0,completed:0}}}}const A=new N;class O{constructor(){C(this,"config");const e=window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1";this.config={useApiServer:!0,fallbackToLocal:!0},console.log(e?"🔧 개발 환경: IndexedDB + PostgreSQL (하이브리드)":"🌐 프로덕션 환경: IndexedDB + PostgreSQL (하이브리드)")}updateConfig(e){this.config={...this.config,...e}}async bootstrapSync(){try{console.log("🔄 부트스트랩 동기화 시작 - 차분 업로드 방식...");const[e,t]=await Promise.all([w.loadUnclassifiedData(),w.loadClassifiedData()]),s=((e==null?void 0:e.length)||0)+((t==null?void 0:t.length)||0);if(console.log(`📊 로컬 데이터: 미분류 ${(e==null?void 0:e.length)||0}개, 분류 ${(t==null?void 0:t.length)||0}개, 총 ${s}개`),s===0)return{success:!0,uploaded:0,message:"업로드할 로컬 데이터가 없습니다."};console.log("🔍 서버 데이터 ID 목록 조회 중...");const i=await S.getDataIds();let a=new Set,o=new Set;i.success&&i.data?(a=new Set(i.data.unclassifiedIds),o=new Set(i.data.classifiedIds),console.log(`📊 서버 기존 데이터: 미분류 ${a.size}개, 분류 ${o.size}개`)):console.log("⚠️ 서버 데이터 ID 조회 실패, 전체 업로드 진행");const r=(e==null?void 0:e.filter(l=>!a.has(String(l.id))))||[],c=(t==null?void 0:t.filter(l=>!o.has(String(l.id))))||[],n=r.length+c.length;if(console.log(`📊 차분 계산 결과: 새로운 데이터 ${n}개 (미분류: ${r.length}개, 분류: ${c.length}개)`),console.log(`📊 중복 제외: 미분류 ${((e==null?void 0:e.length)||0)-r.length}개, 분류 ${((t==null?void 0:t.length)||0)-c.length}개`),n===0)return{success:!0,uploaded:0,message:"서버에 이미 모든 데이터가 있습니다. 업로드할 새 데이터가 없습니다."};let d=0;const u=500;if(r&&r.length>0){console.log(`📤 새로운 미분류 데이터 업로드 시작: ${r.length}개`);for(let l=0;l<r.length;l+=u){const g=r.slice(l,l+u),h=Math.floor(l/u)+1,y=Math.ceil(r.length/u);console.log(`📦 미분류 청크 ${h}/${y} 업로드 중... (${g.length}개)`);try{const f=await S.saveUnclassifiedData(g);f.success?(d+=g.length,console.log(`✅ 미분류 청크 ${h}/${y} 업로드 완료`)):console.error(`❌ 미분류 청크 ${h} 업로드 실패:`,f.error),l+u<e.length&&await new Promise(D=>setTimeout(D,300))}catch(f){console.error(`❌ 미분류 청크 ${h} 업로드 오류:`,f),console.log(`🔄 청크 ${h} 재시도 중...`);try{(await S.saveUnclassifiedData(g)).success&&(d+=g.length,console.log(`✅ 미분류 청크 ${h} 재시도 성공`))}catch{console.error(`❌ 청크 ${h} 재시도 실패, 건너뜀`)}}}console.log(`✅ 미분류 데이터 전체 업로드 완료: ${d}개`)}if(c&&c.length>0){console.log(`📤 새로운 분류 데이터 업로드 시작: ${c.length}개`);for(let l=0;l<c.length;l+=u){const g=c.slice(l,l+u),h=Math.floor(l/u)+1,y=Math.ceil(c.length/u);console.log(`📦 분류 청크 ${h}/${y} 업로드 중... (${g.length}개)`);try{const f=await S.saveClassifiedData(g);f.success?(d+=g.length,console.log(`✅ 분류 청크 ${h}/${y} 업로드 완료`)):console.error(`❌ 분류 청크 ${h} 업로드 실패:`,f.error),l+u<t.length&&await new Promise(D=>setTimeout(D,300))}catch(f){console.error(`❌ 분류 청크 ${h} 업로드 오류:`,f),console.log(`🔄 청크 ${h} 재시도 중...`);try{(await S.saveClassifiedData(g)).success&&(d+=g.length,console.log(`✅ 분류 청크 ${h} 재시도 성공`))}catch{console.error(`❌ 청크 ${h} 재시도 실패, 건너뜀`)}}}console.log("✅ 분류 데이터 전체 업로드 완료")}console.log("🔄 서버 스냅샷으로 로컬 캐시 갱신 중...");try{const[l,g]=await Promise.all([this.loadUnclassifiedData(),this.getClassifiedData()]);console.log(`✅ 서버 스냅샷 재적재 완료: 미분류 ${(l==null?void 0:l.length)||0}개, 분류 ${(g==null?void 0:g.length)||0}개`)}catch(l){console.warn("⚠️ 캐시 갱신 실패 (데이터는 업로드됨):",l)}return console.log("✅ 부트스트랩 동기화 완료!"),{success:!0,uploaded:d,message:`${d.toLocaleString()}개의 새로운 데이터를 서버로 업로드했습니다.

중복 제외: ${s-n}개`}}catch(e){return console.error("❌ 부트스트랩 동기화 실패:",e),{success:!1,uploaded:0,message:`동기화 실패: ${e instanceof Error?e.message:"알 수 없는 오류"}`}}}async saveChannels(e){try{if(this.config.useApiServer){const t=await S.saveChannels(e);if(t.success)console.log("✅ API 서버에 채널 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveChannels(e),console.log("✅ 로컬 IndexedDB에 채널 데이터 저장 완료")}catch(t){if(console.error("❌ 채널 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveChannels(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getChannels(){try{if(this.config.useApiServer){const e=await S.getChannels();if(e.success&&e.data)return console.log("✅ API 서버에서 채널 데이터 조회 완료"),e.data}if(this.config.fallbackToLocal){const e=await w.getChannels();return console.log("⚠️ 로컬 IndexedDB에서 채널 데이터 조회"),e}return{}}catch(e){return console.error("❌ 채널 데이터 조회 실패:",e),this.config.fallbackToLocal?await w.getChannels():{}}}async saveVideos(e){try{if(this.config.useApiServer){const t=await S.saveVideos(e);if(t.success)console.log("✅ API 서버에 비디오 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveVideos(e),console.log("✅ 로컬 IndexedDB에 비디오 데이터 저장 완료")}catch(t){if(console.error("❌ 비디오 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveVideos(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getVideos(){try{if(this.config.useApiServer){const e=await S.getVideos();if(e.success&&e.data)return console.log("✅ API 서버에서 비디오 데이터 조회 완료"),e.data}if(this.config.fallbackToLocal){const e=await w.getVideos();return console.log("⚠️ 로컬 IndexedDB에서 비디오 데이터 조회"),e}return{}}catch(e){return console.error("❌ 비디오 데이터 조회 실패:",e),this.config.fallbackToLocal?await w.getVideos():{}}}async adaptiveBatchUpload(e,t,s){var u,l,g,h;let r=200,c=0,n=0;const d=[];console.log(`📦 어댑티브 배치 업로드 시작: ${e.length}개 (${s})`);for(let y=0;y<e.length;y+=r){const f=e.slice(y,y+r),D=Math.floor(y/r)+1,$=Math.ceil(e.length/r);console.log(`📦 배치 ${D}/${$} 전송 중... (${f.length}개, 크기: ${r})`);let b=!1,m=0;for(;m<3&&!b;)try{const p=JSON.stringify(f).length,x=((u=f[0])==null?void 0:u.id)||"unknown",P=((l=f[f.length-1])==null?void 0:l.id)||"unknown";console.log("📊 배치 요청 정보:",{batchNum:D,size:f.length,payloadBytes:p,firstId:x,lastId:P,retryAttempt:m+1});const v=await t(f);if(v.success)console.log(`✅ 배치 ${D} 전송 완료 (시도 ${m+1})`),b=!0,c+=f.length,r<1e3&&m===0&&(r=Math.min(r+50,1e3));else throw new Error(v.error||"API 응답 실패")}catch(p){m++;const x=((g=p.message)==null?void 0:g.includes("status: 500"))||((h=p.message)==null?void 0:h.includes("status: 413"));if(console.error(`❌ 배치 ${D} 전송 실패 (시도 ${m}/3):`,{error:p.message,isServerError:x,currentBatchSize:r}),x&&m<3){r=Math.max(Math.floor(r/2),50),console.log(`🔄 배치 크기 축소: ${r}`);const P=Math.pow(2,m-1)*1e3;console.log(`⏳ 백오프 대기: ${P}ms`),await new Promise(T=>setTimeout(T,P));const v=f.slice(0,r);v.length<f.length&&e.splice(y+v.length,0,...f.slice(v.length)),f.length=v.length,Object.assign(f,v)}else m>=3&&(console.error(`💀 배치 ${D} 데드레터 큐로 이동:`,f.map(P=>P.id)),d.push(...f),n+=f.length,b=!0)}y+r<e.length&&await new Promise(p=>setTimeout(p,1e3))}return console.log("📊 어댑티브 배치 업로드 완료:",{success:c,failed:n,deadLetter:d.length,finalBatchSize:r}),{success:c,failed:n,deadLetterItems:d}}async saveClassifiedData(e){try{if(this.config.useApiServer)if(Array.isArray(e)&&e.length>200){const t=await this.adaptiveBatchUpload(e,s=>S.saveClassifiedData(s),"분류 데이터");t.deadLetterItems.length>0&&console.warn(`⚠️ ${t.deadLetterItems.length}개 항목이 데드레터 큐로 이동됨`)}else{const t=await S.saveClassifiedData(e);if(t.success)console.log("✅ API 서버에 분류 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveClassifiedData(e),console.log("✅ 로컬 IndexedDB에 분류 데이터 저장 완료")}catch(t){if(console.error("❌ 분류 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveClassifiedData(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getClassifiedData(){try{if(this.config.useApiServer){const e=await S.getClassifiedData();if(e.success&&e.data){console.log("✅ API 서버에서 분류 데이터 조회 완료:",e.data.length,"개");try{await w.saveClassifiedData(e.data),console.log("✅ IndexedDB 캐시 갱신 완료")}catch(t){console.warn("⚠️ IndexedDB 캐시 갱신 실패 (데이터는 정상 반환):",t)}return e.data}}if(this.config.fallbackToLocal){const e=await w.loadClassifiedData();return console.log("⚠️ 로컬 IndexedDB에서 분류 데이터 조회 (서버 연결 실패)"),e}return[]}catch(e){if(console.error("❌ 분류 데이터 조회 실패:",e),this.config.fallbackToLocal){const t=await w.loadClassifiedData();return console.log("⚠️ 오류 발생, 로컬 IndexedDB 폴백"),t}return[]}}async saveUnclassifiedData(e){try{if(this.config.useApiServer)if(Array.isArray(e)&&e.length>200){const t=await this.adaptiveBatchUpload(e,s=>S.saveUnclassifiedData(s),"미분류 데이터");t.deadLetterItems.length>0&&console.warn(`⚠️ ${t.deadLetterItems.length}개 항목이 데드레터 큐로 이동됨`)}else{const t=await S.saveUnclassifiedData(e);if(t.success)console.log("✅ API 서버에 미분류 데이터 저장 완료");else throw new Error(t.error||"API 저장 실패")}await w.saveUnclassifiedData(e),console.log("✅ 로컬 IndexedDB에 미분류 데이터 저장 완료")}catch(t){if(console.error("❌ 미분류 데이터 저장 실패:",t),this.config.fallbackToLocal)await w.saveUnclassifiedData(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async getUnclassifiedData(){try{if(this.config.useApiServer){const e=await S.getUnclassifiedData();if(e.success&&e.data)return console.log("✅ API 서버에서 미분류 데이터 조회 완료"),e.data}if(this.config.fallbackToLocal){const e=await w.getUnclassifiedData();return console.log("⚠️ 로컬 IndexedDB에서 미분류 데이터 조회"),e}return[]}catch(e){return console.error("❌ 미분류 데이터 조회 실패:",e),this.config.fallbackToLocal?await w.getUnclassifiedData():[]}}async loadUnclassifiedData(){try{const e=await w.loadUnclassifiedData();return console.log("✅ 하이브리드: IndexedDB에서 미분류 데이터 로드"),e}catch(e){return console.error("❌ 미분류 데이터 로드 실패:",e),[]}}async loadUnclassifiedDataByDate(e){try{const t=await w.loadUnclassifiedDataByDate(e);return console.log(`✅ 하이브리드: ${e} 날짜 데이터 로드`),t}catch(t){return console.error("❌ 날짜별 데이터 로드 실패:",t),[]}}async updateUnclassifiedData(e){try{await this.saveUnclassifiedData(e),console.log("✅ 하이브리드: 미분류 데이터 업데이트 완료")}catch(t){throw console.error("❌ 미분류 데이터 업데이트 실패:",t),t}}async loadClassifiedData(){try{const e=await w.loadClassifiedData();return console.log("✅ 하이브리드: IndexedDB에서 분류 데이터 로드"),e}catch(e){return console.error("❌ 분류 데이터 로드 실패:",e),[]}}async loadClassifiedByDate(e){try{const t=await w.loadClassifiedByDate(e);return console.log(`✅ 하이브리드: ${e} 날짜 분류 데이터 로드`),t||[]}catch(t){return console.error("❌ 날짜별 분류 데이터 로드 실패:",t),[]}}async saveDailyProgress(e){try{await w.saveDailyProgress(e),console.log("✅ 하이브리드: 일별 진행률 저장 완료")}catch(t){throw console.error("❌ 일별 진행률 저장 실패:",t),t}}async getAvailableDates(){try{const e=await w.getAvailableDates();return console.log("✅ 하이브리드: 사용 가능한 날짜 조회"),e}catch(e){return console.error("❌ 날짜 목록 조회 실패:",e),[]}}async saveSystemConfig(e,t){try{if(this.config.useApiServer){const s=await S.saveSystemConfig(e,t);if(s.success)console.log("✅ API 서버에 시스템 설정 저장 완료");else throw new Error(s.error||"API 저장 실패")}await w.saveSystemConfig(e,t),console.log("✅ 로컬 IndexedDB에 시스템 설정 저장 완료")}catch(s){if(console.error("❌ 시스템 설정 저장 실패:",s),this.config.fallbackToLocal)await w.saveSystemConfig(e,t),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw s}}async getSystemConfig(e){try{if(this.config.useApiServer){const t=await S.getSystemConfig(e);if(t.success&&t.data!==void 0)return console.log("✅ API 서버에서 시스템 설정 조회 완료"),t.data}if(this.config.fallbackToLocal){const t=await w.getSystemConfig(e);return console.log("⚠️ 로컬 IndexedDB에서 시스템 설정 조회"),t}return null}catch(t){return console.error("❌ 시스템 설정 조회 실패:",t),this.config.fallbackToLocal?await w.getSystemConfig(e):null}}async saveCategories(e){try{this.config.useApiServer&&console.log("⚠️ API 서버 카테고리 저장 기능은 아직 구현되지 않았습니다."),await w.saveCategories(e),console.log("✅ 로컬 IndexedDB에 세부카테고리 저장 완료")}catch(t){if(console.error("❌ 세부카테고리 저장 실패:",t),this.config.fallbackToLocal)await w.saveCategories(e),console.log("⚠️ 로컬 IndexedDB에만 저장됨");else throw t}}async loadCategories(){try{if(this.config.useApiServer&&console.log("⚠️ API 서버 카테고리 조회 기능은 아직 구현되지 않았습니다."),this.config.fallbackToLocal){const e=await w.loadCategories();return console.log("✅ 로컬 IndexedDB에서 세부카테고리 조회"),e}return null}catch(e){return console.error("❌ 세부카테고리 조회 실패:",e),this.config.fallbackToLocal?await w.loadCategories():null}}async testApiConnection(){try{return(await S.testConnection()).success}catch(e){return console.error("❌ API 서버 연결 테스트 실패:",e),!1}}async syncToApi(){try{console.log("🔄 데이터 동기화 시작...");const e=await w.getChannels();Object.keys(e).length>0&&await this.saveChannels(e);const t=await w.getVideos();Object.keys(t).length>0&&await this.saveVideos(t);const s=await w.getClassifiedData();s.length>0&&await this.saveClassifiedData(s);const i=await w.getUnclassifiedData();i.length>0&&await this.saveUnclassifiedData(i),console.log("✅ 데이터 동기화 완료")}catch(e){throw console.error("❌ 데이터 동기화 실패:",e),e}}async safeUpdateVideo(e,t){try{if(this.config.useApiServer){const s=await S.updateVideo(e,t);if(s.success)return console.log(`✅ 비디오 업데이트 성공: ${e}`),{success:!0};throw new Error(s.error||"Update failed")}}catch(s){console.warn("⚠️ 서버 업데이트 실패, 아웃박스에 추가:",s);try{const i=await A.addToOutbox("update",`/api/videos/${e}`,t);return console.log(`📦 아웃박스에 추가됨: ${i}`),{success:!1,outboxId:i}}catch(i){throw console.error("❌ 아웃박스 추가 실패:",i),i}}return{success:!1}}async safeDeleteVideo(e){try{if(this.config.useApiServer){const t=await S.deleteVideo(e);if(t.success)return console.log(`✅ 비디오 삭제 성공: ${e}`),{success:!0};throw new Error(t.error||"Delete failed")}}catch(t){console.warn("⚠️ 서버 삭제 실패, 아웃박스에 추가:",t);try{const s=await A.addToOutbox("delete",`/api/videos/${e}`,{});return console.log(`📦 아웃박스에 추가됨: ${s}`),{success:!1,outboxId:s}}catch(s){throw console.error("❌ 아웃박스 추가 실패:",s),s}}return{success:!1}}async safeDeleteVideosBatch(e){try{if(this.config.useApiServer){const t=await S.deleteVideosBatch(e);if(t.success)return console.log(`✅ 배치 삭제 성공: ${e.length}개`),{success:!0};throw new Error(t.error||"Batch delete failed")}}catch(t){console.warn("⚠️ 서버 배치 삭제 실패, 아웃박스에 추가:",t);try{const s=await A.addToOutbox("delete","/api/videos/batch",{ids:e});return console.log(`📦 아웃박스에 추가됨: ${s}`),{success:!1,outboxId:s}}catch(s){throw console.error("❌ 아웃박스 추가 실패:",s),s}}return{success:!1}}initializeOutbox(){console.log("📦 아웃박스 서비스 초기화"),A.startAutoProcess()}async getOutboxStats(){return await A.getStats()}async processOutbox(){return await A.processOutbox()}}const k=new O,M=Object.freeze(Object.defineProperty({__proto__:null,hybridService:k},Symbol.toStringTag,{value:"Module"}));export{S as a,U as b,M as c,k as h,w as i};
