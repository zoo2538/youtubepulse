var h=Object.defineProperty;var g=(l,e,t)=>e in l?h(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t;var c=(l,e,t)=>g(l,typeof e!="symbol"?e+"":e,t);import{i}from"./services.5YsVlCvC.js";class d{constructor(){c(this,"metadata",{lastRunAt:"",lastDateProcessed:"",inFlight:!1});c(this,"STORAGE_KEY","auto_collection_metadata");c(this,"MUTEX_KEY","auto_collection_mutex");this.loadMetadata(),this.initialize()}loadMetadata(){try{const e=localStorage.getItem(this.STORAGE_KEY);e&&(this.metadata={...this.metadata,...JSON.parse(e)})}catch(e){console.error("❌ 자동 수집 메타데이터 로드 실패:",e)}}saveMetadata(){try{localStorage.setItem(this.STORAGE_KEY,JSON.stringify(this.metadata))}catch(e){console.error("❌ 자동 수집 메타데이터 저장 실패:",e)}}initialize(){console.log("ℹ️ 클라이언트 자동 수집 비활성화 (서버 전용)")}async checkAndRun(){if(this.metadata.inFlight)return;const e=new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"});if(this.metadata.lastDateProcessed===e){console.log("⏭️ 오늘 자동 수집 이미 완료:",e);return}console.log("🔄 자동 수집 필요:",e),await this.runCollection(e)}async runCollection(e){if(sessionStorage.getItem(this.MUTEX_KEY)){console.log("⏭️ 자동 수집 뮤텍스 차단");return}this.metadata.inFlight=!0,sessionStorage.setItem(this.MUTEX_KEY,"true");const t=Date.now();console.log(`🔄 자동 수집 시작: ${e} (${new Date().toISOString()})`);try{await this.executeServerCollection(e),await this.saveToIndexedDB(e),this.metadata.lastRunAt=new Date().toISOString(),this.metadata.lastDateProcessed=e,this.saveMetadata();const o=Date.now()-t;console.log(`✅ 자동 수집 완료: ${e} (${o}ms)`)}catch(o){console.error("❌ 자동 수집 실패:",o),await this.enqueueRetry(e)}finally{this.metadata.inFlight=!1,sessionStorage.removeItem(this.MUTEX_KEY)}}async executeServerCollection(e){console.log("🔄 서버 자동 수집 실행:",e);try{const t=await fetch("https://api.youthbepulse.com/api/auto-collect",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({dateKey:e})});if(!t.ok)throw new Error(`서버 응답 오류: ${t.status}`);const o=await t.json();console.log("✅ 서버 자동 수집 성공:",o)}catch(t){throw console.error("❌ 서버 자동 수집 실패:",t),t}}async saveToIndexedDB(e){console.log("🔄 IndexedDB 저장:",e);try{await new Promise(t=>setTimeout(t,500)),console.log("✅ IndexedDB 저장 완료")}catch(t){throw console.error("❌ IndexedDB 저장 실패:",t),t}}async enqueueRetry(e){console.log("🔄 재시도 큐에 추가:",e);try{const t=JSON.parse(localStorage.getItem("auto_collection_retry_queue")||"[]");t.push({dateKey:e,timestamp:Date.now(),retryCount:0}),localStorage.setItem("auto_collection_retry_queue",JSON.stringify(t)),console.log("✅ 재시도 큐에 추가 완료")}catch(t){console.error("❌ 재시도 큐 추가 실패:",t)}}async processRetryQueue(){try{const e=JSON.parse(localStorage.getItem("auto_collection_retry_queue")||"[]");if(e.length===0)return;const t=Date.now(),o=24*60*60*1e3,r=e.filter(a=>{const s=t-(a.timestamp||0);return s>o?(console.log("🗑️ 오래된 재시도 큐 항목 제거:",a.dateKey,`(${Math.round(s/1e3/60/60)}시간 경과)`),!1):!0});if(r.length!==e.length&&(localStorage.setItem("auto_collection_retry_queue",JSON.stringify(r)),console.log(`✅ 재시도 큐 정리: ${e.length}개 → ${r.length}개`)),r.length===0)return;console.log(`🔄 재시도 큐 처리: ${r.length}개 항목`);for(const a of r)try{await this.runCollection(a.dateKey);const s=r.filter(n=>n!==a);localStorage.setItem("auto_collection_retry_queue",JSON.stringify(s))}catch(s){if(console.error("❌ 재시도 실패:",a.dateKey,s),a.retryCount=(a.retryCount||0)+1,a.retryCount>=3){const n=r.filter(u=>u!==a);localStorage.setItem("auto_collection_retry_queue",JSON.stringify(n)),console.log("❌ 최대 재시도 횟수 초과:",a.dateKey)}}}catch(e){console.error("❌ 재시도 큐 처리 실패:",e)}}async triggerManualCollection(){const e=new Date().toLocaleDateString("en-CA",{timeZone:"Asia/Seoul"});await this.runCollection(e)}getMetadata(){return{...this.metadata}}}const m=new d;typeof window<"u"&&(window.autoCollectionScheduler=m);class w{constructor(){c(this,"telemetry",[])}async readWithServerFirst(e,t,o){const r=Date.now(),a=`fetch_${t}`;try{console.log(`🔄 서버 우선 읽기 시작: ${t}`);const s=await e();return console.log(`✅ 서버 데이터 로드 성공: ${t}`),await this.upsertToIndexedDB(t,s),console.log(`✅ IndexedDB 캐시 저장: ${t}`),this.logTelemetry({operation:a,startTime:r,endTime:Date.now(),success:!0}),s}catch(s){console.error(`❌ 서버 읽기 실패: ${t}`,s);try{const n=await this.getFromIndexedDB(o||t);return console.log(`🔄 IndexedDB 폴백 사용: ${t}`),this.showOfflineBadge(),this.logTelemetry({operation:a,startTime:r,endTime:Date.now(),success:!0}),n}catch(n){throw console.error(`❌ IndexedDB 폴백 실패: ${t}`,n),this.logTelemetry({operation:a,startTime:r,endTime:Date.now(),success:!1,error:n instanceof Error?n.message:"Unknown error"}),n}}}async writeWithServerFirst(e,t,o){const r=Date.now(),a=`save_${o}`;try{console.log(`🔄 서버 우선 쓰기 시작: ${o}`),await this.addToLocalQueue(o,e),console.log(`✅ 로컬 큐 추가: ${o}`);const s=await t(e);console.log(`✅ 서버 저장 성공: ${o}`),await this.upsertToIndexedDB(o,s),console.log(`✅ IndexedDB 서버 응답 업데이트: ${o}`),await this.removeFromLocalQueue(o),console.log(`✅ 로컬 큐 제거: ${o}`),this.logTelemetry({operation:a,startTime:r,endTime:Date.now(),success:!0})}catch(s){throw console.error(`❌ 서버 쓰기 실패: ${o}`,s),console.log(`🔄 로컬 큐 유지 (재시도 대기): ${o}`),this.logTelemetry({operation:a,startTime:r,endTime:Date.now(),success:!1,error:s instanceof Error?s.message:"Unknown error"}),s}}async upsertToIndexedDB(e,t){try{const o=await this.getFromIndexedDB(e),r=this.mergeData(o,t);await i.saveData(e,r),console.log(`✅ IndexedDB upsert 완료: ${e}`)}catch(o){throw console.error(`❌ IndexedDB upsert 실패: ${e}`,o),o}}async getFromIndexedDB(e){try{return await i.loadData(e)}catch(t){throw console.error(`❌ IndexedDB 읽기 실패: ${e}`,t),t}}mergeData(e,t){return e?t?{...e,...t}:e:t}async addToLocalQueue(e,t){try{const o=JSON.parse(localStorage.getItem("local_write_queue")||"[]");o.push({key:e,data:t,timestamp:Date.now()}),localStorage.setItem("local_write_queue",JSON.stringify(o))}catch(o){throw console.error("❌ 로컬 큐 추가 실패:",o),o}}async removeFromLocalQueue(e){try{const o=JSON.parse(localStorage.getItem("local_write_queue")||"[]").filter(r=>r.key!==e);localStorage.setItem("local_write_queue",JSON.stringify(o))}catch(t){throw console.error("❌ 로컬 큐 제거 실패:",t),t}}showOfflineBadge(){console.log("🔄 오프라인 모드 활성화");const e=document.createElement("div");e.textContent="오프라인 모드",e.style.cssText=`
      position: fixed;
      top: 10px;
      right: 10px;
      background: #ff6b6b;
      color: white;
      padding: 8px 12px;
      border-radius: 4px;
      z-index: 9999;
      font-size: 12px;
    `,document.body.appendChild(e),setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e)},3e3)}logTelemetry(e){this.telemetry.push(e),this.telemetry.length>100&&(this.telemetry=this.telemetry.slice(-100)),console.log(`📊 텔레메트리: ${e.operation} (${e.endTime-e.startTime}ms) ${e.success?"✅":"❌"}`)}getTelemetry(){return[...this.telemetry]}async retryLocalQueue(){try{const e=JSON.parse(localStorage.getItem("local_write_queue")||"[]");if(e.length===0){console.log("🔄 재시도할 로컬 큐 없음");return}console.log(`🔄 로컬 큐 재시도: ${e.length}개 항목`);for(const t of e)try{await this.writeWithServerFirst(t.data,async o=>(console.log("🔄 서버 재시도:",t.key),o),t.key)}catch(o){console.error("❌ 로컬 큐 재시도 실패:",t.key,o)}}catch(e){console.error("❌ 로컬 큐 재시도 실패:",e)}}}const f=new w;typeof window<"u"&&(window.serverAuthoritativeService=f);export{m as a,f as s};
